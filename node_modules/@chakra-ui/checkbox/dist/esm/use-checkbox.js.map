{"version":3,"sources":["../../src/use-checkbox.ts"],"names":["useBoolean","useControllableProp","useSafeLayoutEffect","callAllHandlers","dataAttr","mergeRefs","visuallyHiddenStyle","useCallback","useRef","useState","useCheckbox","props","defaultIsChecked","isChecked","checkedProp","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isIndeterminate","isInvalid","name","value","id","htmlProps","isFocused","setFocused","isHovered","setHovered","isActive","setActive","ref","checkedState","setCheckedState","isControlled","handleChange","event","preventDefault","target","checked","current","indeterminate","Boolean","trulyDisabled","onKeyDown","key","on","onKeyUp","off","notInSync","getCheckboxProps","forwardedRef","onPressDown","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getInputProps","type","onBlur","onFocus","required","disabled","readOnly","style","getLabelProps","stopEvent","onTouchStart","state","stopPropagation"],"mappings":"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","sourcesContent":["import {\n  useBoolean,\n  useControllableProp,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  dataAttr,\n  mergeRefs,\n  PropGetter,\n} from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseCheckboxProps {\n  /**\n   * If `true`, the checkbox will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the checkbox will be indeterminate.\n   * This only affects the icon shown inside checkbox\n   * and does not modify the isChecked property.\n   */\n  isIndeterminate?: boolean\n  /**\n   * If `true`, the checkbox will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is passed, the checkbox will\n   * remain tabbable but not interactive\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the checkbox will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the checkbox is marked as invalid.\n   * Changes style of unchecked state.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the checkbox input is marked as required,\n   * and `required` attribute will be added\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * The callback invoked when the checked state of the `Checkbox` changes..\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n  /**\n   * The name of the input field in a checkbox\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the checkbox input.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * id assigned to input\n   */\n  id?: string\n}\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/components/useCheckbox\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const {\n    defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id,\n    ...htmlProps\n  } = props\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovered] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [checkedState, setCheckedState] = useState(!!defaultIsChecked)\n\n  const [isControlled, isChecked] = useControllableProp(\n    checkedProp,\n    checkedState,\n  )\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChange?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChange,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (ref.current) {\n      ref.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return\n    const notInSync =\n      (ref.current.checked && !isChecked) || (!ref.current.checked && isChecked)\n\n    if (notInSync) {\n      setCheckedState(ref.current.checked)\n    }\n  }, [ref.current])\n\n  const getCheckboxProps: PropGetter = (props = {}, forwardedRef = null) => {\n    const onPressDown = (event: React.MouseEvent) => {\n      // On mousedown, the input blurs and returns focus to the `body`,\n      // we need to prevent this. Native checkboxes keeps focus on `input`\n      event.preventDefault()\n      setActive.on()\n    }\n\n    return {\n      ...props,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off),\n    }\n  }\n\n  const getInputProps: PropGetter = (props = {}, forwardedRef = null) => ({\n    ...props,\n    ref: mergeRefs(ref, forwardedRef),\n    type: \"checkbox\",\n    name,\n    value,\n    id,\n    onChange: callAllHandlers(props.onChange, handleChange),\n    onBlur: callAllHandlers(props.onBlur, setFocused.off),\n    onFocus: callAllHandlers(props.onFocus, setFocused.on),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n    required: isRequired,\n    checked: isChecked,\n    disabled: trulyDisabled,\n    readOnly: isReadOnly,\n    \"aria-invalid\": isInvalid,\n    \"aria-disabled\": isDisabled,\n    style: visuallyHiddenStyle,\n  })\n\n  const getLabelProps: PropGetter = (props = {}, forwardedRef = null) => {\n    return {\n      ...props,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }\n  }\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n"],"file":"use-checkbox.js"}