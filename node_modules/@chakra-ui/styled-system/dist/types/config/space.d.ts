/// <reference path="../@styled-system/core.d.ts" />
import * as CSS from "csstype";
import { ResponsiveValue, Length } from "../utils";
/**
 * Types for space related CSS properties
 */
export interface SpaceProps {
    /**
     * Margin on top, left, bottom and right
     */
    m?: ResponsiveValue<CSS.Property.Margin<Length>>;
    /**
     * Margin on top, left, bottom and right
     */
    margin?: ResponsiveValue<CSS.Property.Margin<Length>>;
    /**
     * Margin on top
     */
    mt?: ResponsiveValue<CSS.Property.Margin<Length>>;
    /**
     * Margin on top
     */
    marginTop?: ResponsiveValue<CSS.Property.MarginTop<Length>>;
    /**
     * Margin on right
     */
    mr?: ResponsiveValue<CSS.Property.MarginRight<Length>>;
    /**
     * Margin on right
     */
    marginRight?: ResponsiveValue<CSS.Property.MarginRight<Length>>;
    /**
     * Margin on bottom
     */
    mb?: ResponsiveValue<CSS.Property.MarginBottom<Length>>;
    /**
     * Margin on bottom
     */
    marginBottom?: ResponsiveValue<CSS.Property.MarginBottom<Length>>;
    /**
     * Margin on left
     */
    ml?: ResponsiveValue<CSS.Property.MarginLeft<Length>>;
    /**
     * Margin on left
     */
    marginLeft?: ResponsiveValue<CSS.Property.MarginLeft<Length>>;
    /**
     * Margin on left and right
     */
    mx?: ResponsiveValue<CSS.Property.Margin<Length>>;
    /**
     * Margin on left and right
     */
    marginX?: ResponsiveValue<CSS.Property.Margin<Length>>;
    /**
     * Margin on top and bottom
     */
    my?: ResponsiveValue<CSS.Property.Margin<Length>>;
    /**
     * Margin on top and bottom
     */
    marginY?: ResponsiveValue<CSS.Property.Margin<Length>>;
    /**
     * Padding on top, left, bottom and right
     */
    p?: ResponsiveValue<CSS.Property.Padding<Length>>;
    /**
     * Padding on top, left, bottom and right
     */
    padding?: ResponsiveValue<CSS.Property.Padding<Length>>;
    /**
     * Padding on top
     */
    pt?: ResponsiveValue<CSS.Property.PaddingTop<Length>>;
    /**
     * Padding on top
     */
    paddingTop?: ResponsiveValue<CSS.Property.PaddingTop<Length>>;
    /**
     * Padding on right
     */
    pr?: ResponsiveValue<CSS.Property.PaddingRight<Length>>;
    /**
     * Padding on right
     */
    paddingRight?: ResponsiveValue<CSS.Property.PaddingRight<Length>>;
    /**
     * Padding on bottom
     */
    pb?: ResponsiveValue<CSS.Property.PaddingBottom<Length>>;
    /**
     * Padding on bottom
     */
    paddingBottom?: ResponsiveValue<CSS.Property.PaddingBottom<Length>>;
    /**
     * Padding on left
     */
    pl?: ResponsiveValue<CSS.Property.PaddingLeft<Length>>;
    /**
     * Padding on left
     */
    paddingLeft?: ResponsiveValue<CSS.Property.PaddingLeft<Length>>;
    /**
     * Padding on left and right
     */
    px?: ResponsiveValue<CSS.Property.Padding<Length>>;
    /**
     * Padding on left and right
     */
    paddingX?: ResponsiveValue<CSS.Property.Padding<Length>>;
    /**
     * Padding on top and bottom
     */
    py?: ResponsiveValue<CSS.Property.Padding<Length>>;
    /**
     * Padding on top and bottom
     */
    paddingY?: ResponsiveValue<CSS.Property.Padding<Length>>;
}
/**
 * Converts shorthand or longhand margin and padding props to margin and padding CSS declarations
 *
 * - Numbers from 0-4 (or the length of theme.space) are converted to values on the spacing scale.
 * - Negative values can be used for negative margins.
 * - Numbers greater than the length of the theme.space array are converted to raw pixel values.
 * - String values are passed as raw CSS values.
 * - Array values are converted into responsive values.
 */
export declare const space: import("@styled-system/core").StyleFn;
export declare const spaceParser: import("@styled-system/core").StyleFn;
