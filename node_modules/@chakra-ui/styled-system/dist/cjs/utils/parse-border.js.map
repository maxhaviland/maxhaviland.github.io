{"version":3,"sources":["../../../src/utils/parse-border.ts"],"names":["matchString","val","regex","match","unitMatch","styleMatch","parseBorder","value","key","css","split","style","unit","borderStyleKey","borderWidthKey","borderColorKey","filter","i","color"],"mappings":";;;;;AAAA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAcC,KAAd;AAAA,SAAgCD,GAAG,CAACE,KAAJ,CAAUD,KAAV,CAAhC;AAAA,CAApB;;AAEA,IAAME,SAAS,GAAG,gDAAlB;AACA,IAAMC,UAAU,GAAG,kEAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASC,WAAT,CAAqBC,KAArB,EAAoCC,GAApC,EAAoD;AAAA,MAAhBA,GAAgB;AAAhBA,IAAAA,GAAgB,GAAV,QAAU;AAAA;;AACzD,MAAMC,GAAG,GAAG,EAAZ;AAEA,MAAMC,KAAK,GAAGH,KAAK,CAACG,KAAN,CAAY,GAAZ,CAAd;;AAHyD,aAIzCV,WAAW,CAACO,KAAD,EAAQF,UAAR,CAAX,IAAkC,CAAC,EAAD,CAJO;AAAA,MAIlDM,KAJkD;;AAAA,cAK1CX,WAAW,CAACO,KAAD,EAAQH,SAAR,CAAX,IAAiC,CAAC,EAAD,CALS;AAAA,MAKlDQ,IALkD;;AAOzD,MAAMC,cAAc,GAAML,GAAN,UAApB;AACA,MAAMM,cAAc,GAAMN,GAAN,UAApB;AACA,MAAMO,cAAc,GAAMP,GAAN,UAApB;;AAEA,MAAIG,KAAJ,EAAW;AACTF,IAAAA,GAAG,CAACI,cAAD,CAAH,GAAsBF,KAAtB;AACD;;AAED,MAAIC,IAAJ,EAAU;AACRH,IAAAA,GAAG,CAACK,cAAD,CAAH,GAAsBF,IAAtB;AACD;;AAjBwD,sBAmBzCF,KAAK,CAACM,MAAN,CAAa,UAACC,CAAD,EAAO;AAClC,QAAMd,KAAK,GAAGH,WAAW,CAACiB,CAAD,EAAIb,SAAJ,CAAX,IAA6BJ,WAAW,CAACiB,CAAD,EAAIZ,UAAJ,CAAtD;AACA,WAAO,CAACF,KAAD,IAAUc,CAAC,KAAKN,KAAhB,IAAyBM,CAAC,KAAKL,IAAtC;AACD,GAHe,CAnByC;AAAA,MAmBlDM,KAnBkD;;AAwBzD,MAAIA,KAAJ,EAAW;AACTT,IAAAA,GAAG,CAACM,cAAD,CAAH,GAAsBG,KAAtB;AACD;;AAED,SAAOT,GAAP;AACD","sourcesContent":["const matchString = (val: string, regex: RegExp) => val.match(regex)\n\nconst unitMatch = /(\\d*\\.?\\d+)\\s?(px|em|ex|%|in|rem|cn|mm|pt|pc+)/\nconst styleMatch = /none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset/\n\n/**\n * Function to enable shorthand border values.\n * @example\n * border = \"3px solid blue.300\"\n *\n * This would parse the border values, and convert the \"blue.300\" token\n * to the equivalent color value. If value doesn't exist in theme, it'll use the\n * raw values.\n */\nexport function parseBorder(value: string, key = \"border\") {\n  const css = {}\n\n  const split = value.split(\" \")\n  const [style] = matchString(value, styleMatch) || [\"\"]\n  const [unit] = matchString(value, unitMatch) || [\"\"]\n\n  const borderStyleKey = `${key}Style`\n  const borderWidthKey = `${key}Width`\n  const borderColorKey = `${key}Color`\n\n  if (style) {\n    css[borderStyleKey] = style\n  }\n\n  if (unit) {\n    css[borderWidthKey] = unit\n  }\n\n  const [color] = split.filter((i) => {\n    const match = matchString(i, unitMatch) && matchString(i, styleMatch)\n    return !match && i !== style && i !== unit\n  })\n\n  if (color) {\n    css[borderColorKey] = color\n  }\n\n  return css\n}\n"],"file":"parse-border.js"}