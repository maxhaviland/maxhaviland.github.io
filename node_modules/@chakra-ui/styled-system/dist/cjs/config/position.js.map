{"version":3,"sources":["../../../src/config/position.ts"],"names":["config","position","pos","property","zIndex","scale","inset","properties","transform","positiveOrNegative","insetX","insetY","top","right","bottom","left","positionParser"],"mappings":";;;;;AAAA;;AAEA;;AAEA,IAAMA,MAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE,IADW;AAErBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,QAAQ,EAAE;AADP,GAFgB;AAKrBC,EAAAA,MAAM,EAAE;AACND,IAAAA,QAAQ,EAAE,QADJ;AAENE,IAAAA,KAAK,EAAE;AAFD,GALa;AASrBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,KAAT,EAAgB,QAAhB,EAA0B,OAA1B,CADP;AAELF,IAAAA,KAAK,EAAE,OAFF;AAGLG,IAAAA,SAAS,EAAEC;AAHN,GATc;AAcrBC,EAAAA,MAAM,EAAE;AACNH,IAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,OAAT,CADN;AAENF,IAAAA,KAAK,EAAE,OAFD;AAGNG,IAAAA,SAAS,EAAEC;AAHL,GAda;AAmBrBE,EAAAA,MAAM,EAAE;AACNJ,IAAAA,UAAU,EAAE,CAAC,KAAD,EAAQ,QAAR,CADN;AAENF,IAAAA,KAAK,EAAE,OAFD;AAGNG,IAAAA,SAAS,EAAEC;AAHL,GAnBa;AAwBrBG,EAAAA,GAAG,EAAE;AACHT,IAAAA,QAAQ,EAAE,KADP;AAEHE,IAAAA,KAAK,EAAE,OAFJ;AAGHG,IAAAA,SAAS,EAAEC;AAHR,GAxBgB;AA6BrBI,EAAAA,KAAK,EAAE;AACLV,IAAAA,QAAQ,EAAE,OADL;AAELE,IAAAA,KAAK,EAAE,OAFF;AAGLG,IAAAA,SAAS,EAAEC;AAHN,GA7Bc;AAkCrBK,EAAAA,MAAM,EAAE;AACNX,IAAAA,QAAQ,EAAE,QADJ;AAENE,IAAAA,KAAK,EAAE,OAFD;AAGNG,IAAAA,SAAS,EAAEC;AAHL,GAlCa;AAuCrBM,EAAAA,IAAI,EAAE;AACJZ,IAAAA,QAAQ,EAAE,MADN;AAEJE,IAAAA,KAAK,EAAE,OAFH;AAGJG,IAAAA,SAAS,EAAEC;AAHP;AAvCe,CAAvB;AA8CA;AACA;AACA;;AA4CO,IAAMR,QAAQ,GAAG,kBAAOD,MAAP,CAAjB;;AACA,IAAMgB,cAAc,GAAG,wBAAahB,MAAb,CAAvB","sourcesContent":["import { Config, createParser, system } from \"@styled-system/core\"\nimport * as CSS from \"csstype\"\nimport { Length, positiveOrNegative, ResponsiveValue } from \"../utils\"\n\nconst config: Config = {\n  position: true,\n  pos: {\n    property: \"position\",\n  },\n  zIndex: {\n    property: \"zIndex\",\n    scale: \"zIndices\",\n  },\n  inset: {\n    properties: [\"left\", \"top\", \"bottom\", \"right\"],\n    scale: \"space\",\n    transform: positiveOrNegative,\n  },\n  insetX: {\n    properties: [\"left\", \"right\"],\n    scale: \"space\",\n    transform: positiveOrNegative,\n  },\n  insetY: {\n    properties: [\"top\", \"bottom\"],\n    scale: \"space\",\n    transform: positiveOrNegative,\n  },\n  top: {\n    property: \"top\",\n    scale: \"space\",\n    transform: positiveOrNegative,\n  },\n  right: {\n    property: \"right\",\n    scale: \"space\",\n    transform: positiveOrNegative,\n  },\n  bottom: {\n    property: \"bottom\",\n    scale: \"space\",\n    transform: positiveOrNegative,\n  },\n  left: {\n    property: \"left\",\n    scale: \"space\",\n    transform: positiveOrNegative,\n  },\n}\n\n/**\n * Types for position CSS properties\n */\nexport interface PositionProps {\n  /**\n   * The CSS `z-index` property\n   */\n  zIndex?: ResponsiveValue<string | CSS.Property.ZIndex>\n  /**\n   * The CSS `top` property\n   */\n  top?: ResponsiveValue<CSS.Property.Top<Length>>\n  /**\n   * The CSS `right` property\n   */\n  right?: ResponsiveValue<CSS.Property.Right<Length>>\n  /**\n   * The CSS `bottom` property\n   */\n  bottom?: ResponsiveValue<CSS.Property.Bottom<Length>>\n  /**\n   * The CSS `left` property\n   */\n  left?: ResponsiveValue<CSS.Property.Left<Length>>\n  /**\n   * The CSS `left`, `right`, `top`, `bottom` property\n   */\n  inset?: ResponsiveValue<CSS.Property.Left<Length>>\n  /**\n   * The CSS `left`, and `right` property\n   */\n  insetX?: ResponsiveValue<CSS.Property.Left<Length>>\n  /**\n   * The CSS `top`, and `bottom` property\n   */\n  insetY?: ResponsiveValue<CSS.Property.Left<Length>>\n  /**\n   * The CSS `position` property\n   */\n  pos?: ResponsiveValue<CSS.Property.Position>\n  /**\n   * The CSS `position` property\n   */\n  position?: ResponsiveValue<CSS.Property.Position>\n}\n\nexport const position = system(config)\nexport const positionParser = createParser(config)\n"],"file":"position.js"}