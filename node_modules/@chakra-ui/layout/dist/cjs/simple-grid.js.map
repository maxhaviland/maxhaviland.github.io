{"version":3,"sources":["../../src/simple-grid.tsx"],"names":["SimpleGrid","props","ref","columns","spacingX","spacingY","spacing","minChildWidth","rest","templateColumns","widthToColumns","countToColumns","__DEV__","displayName","toPx","n","width","value","count"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,UAAU,gBAAG,wBACxB,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgC;AAAA,MAE5BC,OAF4B,GAQ1BF,KAR0B,CAE5BE,OAF4B;AAAA,MAG5BC,QAH4B,GAQ1BH,KAR0B,CAG5BG,QAH4B;AAAA,MAI5BC,QAJ4B,GAQ1BJ,KAR0B,CAI5BI,QAJ4B;AAAA,MAK5BC,OAL4B,GAQ1BL,KAR0B,CAK5BK,OAL4B;AAAA,MAM5BC,aAN4B,GAQ1BN,KAR0B,CAM5BM,aAN4B;AAAA,MAOzBC,IAPyB,iCAQ1BP,KAR0B;;AAU9B,MAAMQ,eAAe,GAAGF,aAAa,GACjCG,cAAc,CAACH,aAAD,CADmB,GAEjCI,cAAc,CAACR,OAAD,CAFlB;AAIA,sBACE,oBAAC,UAAD;AACE,IAAA,GAAG,EAAED,GADP;AAEE,IAAA,GAAG,EAAEI,OAFP;AAGE,IAAA,SAAS,EAAEF,QAHb;AAIE,IAAA,MAAM,EAAEC,QAJV;AAKE,IAAA,eAAe,EAAEI;AALnB,KAMMD,IANN,EADF;AAUD,CAzBuB,CAAnB;;;AA4BP,IAAII,cAAJ,EAAa;AACXZ,EAAAA,UAAU,CAACa,WAAX,GAAyB,YAAzB;AACD;;AAED,SAASC,IAAT,CAAcC,CAAd,EAAkC;AAChC,SAAO,qBAASA,CAAT,IAAiBA,CAAjB,UAAyBA,CAAhC;AACD;;AAED,SAASL,cAAT,CAAwBM,KAAxB,EAAoC;AAClC,SAAO,0BAAcA,KAAd,EAAqB,UAACC,KAAD;AAAA,WAC1B,mBAAOA,KAAP,IAAgB,IAAhB,gCAAkDH,IAAI,CAACG,KAAD,CAAtD,YAD0B;AAAA,GAArB,CAAP;AAGD;;AAED,SAASN,cAAT,CAAwBO,KAAxB,EAAoC;AAClC,SAAO,0BAAcA,KAAd,EAAqB,UAACD,KAAD;AAAA,WAC1B,mBAAOA,KAAP,IAAgB,IAAhB,eAAiCA,KAAjC,WAD0B;AAAA,GAArB,CAAP;AAGD","sourcesContent":["import { ResponsiveValue, forwardRef } from \"@chakra-ui/system\"\nimport { mapResponsive, isNumber, isNull, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component make that providers a simpler interface, and\n * make its easy to create responsive grid layouts.\n *\n * @see Docs https://chakra-ui.com/components/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const {\n      columns,\n      spacingX,\n      spacingY,\n      spacing,\n      minChildWidth,\n      ...rest\n    } = props\n\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  SimpleGrid.displayName = \"SimpleGrid\"\n}\n\nfunction toPx(n: string | number) {\n  return isNumber(n) ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any) {\n  return mapResponsive(width, (value) =>\n    isNull(value) ? null : `repeat(auto-fit, minmax(${toPx(value)}, 1fr))`,\n  )\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    isNull(value) ? null : `repeat(${value}, 1fr)`,\n  )\n}\n"],"file":"simple-grid.js"}