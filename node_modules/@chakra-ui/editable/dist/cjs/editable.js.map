{"version":3,"sources":["../../src/editable.tsx"],"names":["name","errorMessage","EditableProvider","useEditableContext","Editable","props","ref","styles","ownProps","htmlProps","context","isEditing","onSubmit","onCancel","onEdit","_className","className","children","__DEV__","displayName","commonStyles","fontSize","fontWeight","textAlign","bg","EditablePreview","getPreviewProps","previewProps","cursor","display","preview","EditableInput","getInputProps","inputProps","outline","input","useEditableState","isDisabled","useEditableControls","getEditButtonProps","getCancelButtonProps","getSubmitButtonProps"],"mappings":";;;;;;;AAAA;;AAWA;;AAOA;;AACA;;;;;;;;;;qBAQ+C,0BAA+B;AAC5EA,EAAAA,IAAI,EAAE,iBADsE;AAE5EC,EAAAA,YAAY,EACV;AAH0E,CAA/B,C;IAAxCC,gB;IAAkBC,kB;;AAwBzB;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,QAAQ,gBAAG,wBAAiC,SAASA,QAAT,CACvDC,KADuD,EAEvDC,GAFuD,EAGvD;AACA,MAAMC,MAAM,GAAG,iCAAoB,UAApB,EAAgCF,KAAhC,CAAf;AAEA,MAAMG,QAAQ,GAAG,8BAAiBH,KAAjB,CAAjB;;AAHA,qBAIkC,+BAAYG,QAAZ,CAJlC;AAAA,MAIQC,SAJR,gBAIQA,SAJR;AAAA,MAIsBC,OAJtB;;AAAA,MAMQC,SANR,GAMkDD,OANlD,CAMQC,SANR;AAAA,MAMmBC,QANnB,GAMkDF,OANlD,CAMmBE,QANnB;AAAA,MAM6BC,QAN7B,GAMkDH,OANlD,CAM6BG,QAN7B;AAAA,MAMuCC,MANvC,GAMkDJ,OANlD,CAMuCI,MANvC;;AAQA,MAAMC,UAAU,GAAG,eAAG,iBAAH,EAAsBV,KAAK,CAACW,SAA5B,CAAnB;;AAEA,MAAMC,QAAQ,GAAG,oBAAQZ,KAAK,CAACY,QAAd,EAAwB;AACvCN,IAAAA,SAAS,EAATA,SADuC;AAEvCC,IAAAA,QAAQ,EAARA,QAFuC;AAGvCC,IAAAA,QAAQ,EAARA,QAHuC;AAIvCC,IAAAA,MAAM,EAANA;AAJuC,GAAxB,CAAjB;AAOA,sBACE,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEJ;AAAzB,kBACE,oBAAC,sBAAD;AAAgB,IAAA,KAAK,EAAEH;AAAvB,kBACE,oBAAC,cAAD,CAAQ,GAAR;AAAY,IAAA,GAAG,EAAED;AAAjB,KAA0BG,SAA1B;AAAqC,IAAA,SAAS,EAAEM;AAAhD,MACGE,QADH,CADF,CADF,CADF;AASD,CA7BuB,CAAjB;;;AA+BP,IAAIC,cAAJ,EAAa;AACXd,EAAAA,QAAQ,CAACe,WAAT,GAAuB,UAAvB;AACD;;AAED,IAAMC,YAA+B,GAAG;AACtCC,EAAAA,QAAQ,EAAE,SAD4B;AAEtCC,EAAAA,UAAU,EAAE,SAF0B;AAGtCC,EAAAA,SAAS,EAAE,SAH2B;AAItCC,EAAAA,EAAE,EAAE;AAJkC,CAAxC;;AASA;AACA;AACA;AACA;AACA;AACO,IAAMC,eAAe,gBAAG,wBAC7B,SAASA,eAAT,CAAyBpB,KAAzB,EAAgCC,GAAhC,EAAqC;AAAA,4BACPH,kBAAkB,EADX;AAAA,MAC3BuB,eAD2B,uBAC3BA,eAD2B;;AAEnC,MAAMnB,MAAM,GAAG,wBAAf;AAEA,MAAMoB,YAAY,GAAGD,eAAe,CAACrB,KAAD,EAAQC,GAAR,CAApC;;AACA,MAAMS,UAAU,GAAG,eAAG,0BAAH,EAA+BV,KAAK,CAACW,SAArC,CAAnB;;AAEA,sBACE,oBAAC,cAAD,CAAQ,IAAR,eACMW,YADN;AAEE,IAAA,KAAK;AACHC,MAAAA,MAAM,EAAE,MADL;AAEHC,MAAAA,OAAO,EAAE;AAFN,OAGAT,YAHA,EAIAb,MAAM,CAACuB,OAJP,CAFP;AAQE,IAAA,SAAS,EAAEf;AARb,KADF;AAYD,CApB4B,CAAxB;;;AAuBP,IAAIG,cAAJ,EAAa;AACXO,EAAAA,eAAe,CAACN,WAAhB,GAA8B,iBAA9B;AACD;;AAID;AACA;AACA;AACA;AACA;AACO,IAAMY,aAAa,gBAAG,wBAC3B,SAASA,aAAT,CAAuB1B,KAAvB,EAA8BC,GAA9B,EAAmC;AAAA,6BACPH,kBAAkB,EADX;AAAA,MACzB6B,aADyB,wBACzBA,aADyB;;AAEjC,MAAMzB,MAAM,GAAG,wBAAf;AAEA,MAAM0B,UAAU,GAAGD,aAAa,CAAC3B,KAAD,EAAQC,GAAR,CAAhC;;AACA,MAAMS,UAAU,GAAG,eAAG,wBAAH,EAA6BV,KAAK,CAACW,SAAnC,CAAnB;;AAEA,sBACE,oBAAC,cAAD,CAAQ,KAAR,eACMiB,UADN;AAEE,IAAA,KAAK;AACHC,MAAAA,OAAO,EAAE;AADN,OAEAd,YAFA,EAGAb,MAAM,CAAC4B,KAHP,CAFP;AAOE,IAAA,SAAS,EAAEpB;AAPb,KADF;AAWD,CAnB0B,CAAtB;;;AAsBP,IAAIG,cAAJ,EAAa;AACXa,EAAAA,aAAa,CAACZ,WAAd,GAA4B,eAA5B;AACD;AAED;AACA;AACA;;;AACO,SAASiB,gBAAT,GAA4B;AAAA,6BAO7BjC,kBAAkB,EAPW;AAAA,MAE/BQ,SAF+B,wBAE/BA,SAF+B;AAAA,MAG/BC,QAH+B,wBAG/BA,QAH+B;AAAA,MAI/BC,QAJ+B,wBAI/BA,QAJ+B;AAAA,MAK/BC,MAL+B,wBAK/BA,MAL+B;AAAA,MAM/BuB,UAN+B,wBAM/BA,UAN+B;;AASjC,SAAO;AACL1B,IAAAA,SAAS,EAATA,SADK;AAELC,IAAAA,QAAQ,EAARA,QAFK;AAGLC,IAAAA,QAAQ,EAARA,QAHK;AAILC,IAAAA,MAAM,EAANA,MAJK;AAKLuB,IAAAA,UAAU,EAAVA;AALK,GAAP;AAOD;AAED;AACA;AACA;;;AACO,SAASC,mBAAT,GAML;AAAA,6BAMInC,kBAAkB,EANtB;AAAA,MAEEQ,SAFF,wBAEEA,SAFF;AAAA,MAGE4B,kBAHF,wBAGEA,kBAHF;AAAA,MAIEC,oBAJF,wBAIEA,oBAJF;AAAA,MAKEC,oBALF,wBAKEA,oBALF;;AAQA,SAAO;AACL9B,IAAAA,SAAS,EAATA,SADK;AAEL4B,IAAAA,kBAAkB,EAAlBA,kBAFK;AAGLC,IAAAA,oBAAoB,EAApBA,oBAHK;AAILC,IAAAA,oBAAoB,EAApBA;AAJK,GAAP;AAMD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  createContext,\n  cx,\n  MaybeRenderProp,\n  runIfFn,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  useEditable,\n  UseEditableProps,\n  UseEditableReturn,\n} from \"./use-editable\"\n\ntype EditableContext = Omit<UseEditableReturn, \"htmlProps\">\n\nconst [EditableProvider, useEditableContext] = createContext<EditableContext>({\n  name: \"EditableContext\",\n  errorMessage:\n    \"useEditableContext: context is undefined. Seems you forgot to wrap the editable components in `<Editable />`\",\n})\n\ntype RenderProps = Pick<\n  UseEditableReturn,\n  \"isEditing\" | \"onSubmit\" | \"onCancel\" | \"onEdit\"\n>\n\ninterface BaseEditableProps\n  extends Omit<\n    HTMLChakraProps<\"div\">,\n    \"onChange\" | \"value\" | \"defaultValue\" | \"onSubmit\"\n  > {}\n\nexport interface EditableProps\n  extends UseEditableProps,\n    BaseEditableProps,\n    ThemingProps {\n  children?: MaybeRenderProp<RenderProps>\n}\n\n/**\n * Editable\n *\n * The wrapper that provides context and logic for all editable\n * components. It renders a `div`\n */\nexport const Editable = forwardRef<EditableProps, \"div\">(function Editable(\n  props,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Editable\", props)\n\n  const ownProps = omitThemingProps(props)\n  const { htmlProps, ...context } = useEditable(ownProps)\n\n  const { isEditing, onSubmit, onCancel, onEdit } = context\n\n  const _className = cx(\"chakra-editable\", props.className)\n\n  const children = runIfFn(props.children, {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n  })\n\n  return (\n    <EditableProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div ref={ref} {...htmlProps} className={_className}>\n          {children}\n        </chakra.div>\n      </StylesProvider>\n    </EditableProvider>\n  )\n})\n\nif (__DEV__) {\n  Editable.displayName = \"Editable\"\n}\n\nconst commonStyles: SystemStyleObject = {\n  fontSize: \"inherit\",\n  fontWeight: \"inherit\",\n  textAlign: \"inherit\",\n  bg: \"transparent\",\n}\n\nexport interface EditablePreviewProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * EditablePreview\n *\n * The `span` used to display the final value, in the `preview` mode\n */\nexport const EditablePreview = forwardRef<EditablePreviewProps, \"span\">(\n  function EditablePreview(props, ref) {\n    const { getPreviewProps } = useEditableContext()\n    const styles = useStyles()\n\n    const previewProps = getPreviewProps(props, ref)\n    const _className = cx(\"chakra-editable__preview\", props.className)\n\n    return (\n      <chakra.span\n        {...previewProps}\n        __css={{\n          cursor: \"text\",\n          display: \"inline-block\",\n          ...commonStyles,\n          ...styles.preview,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  EditablePreview.displayName = \"EditablePreview\"\n}\n\nexport interface EditableInputProps extends HTMLChakraProps<\"input\"> {}\n\n/**\n * EditableInput\n *\n * The input used in the `edit` mode\n */\nexport const EditableInput = forwardRef<EditableInputProps, \"input\">(\n  function EditableInput(props, ref) {\n    const { getInputProps } = useEditableContext()\n    const styles = useStyles()\n\n    const inputProps = getInputProps(props, ref)\n    const _className = cx(\"chakra-editable__input\", props.className)\n\n    return (\n      <chakra.input\n        {...inputProps}\n        __css={{\n          outline: 0,\n          ...commonStyles,\n          ...styles.input,\n        }}\n        className={_className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  EditableInput.displayName = \"EditableInput\"\n}\n\n/**\n * React hook use to gain access to the editable state and actions.\n */\nexport function useEditableState() {\n  const {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled,\n  } = useEditableContext()\n\n  return {\n    isEditing,\n    onSubmit,\n    onCancel,\n    onEdit,\n    isDisabled,\n  }\n}\n\n/**\n * React hook use to create controls for the editable component\n */\nexport function useEditableControls(): Pick<\n  EditableContext,\n  | \"isEditing\"\n  | \"getEditButtonProps\"\n  | \"getCancelButtonProps\"\n  | \"getSubmitButtonProps\"\n> {\n  const {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps,\n  } = useEditableContext()\n\n  return {\n    isEditing,\n    getEditButtonProps,\n    getCancelButtonProps,\n    getSubmitButtonProps,\n  }\n}\n"],"file":"editable.js"}