{"version":3,"sources":["../../src/portal-manager.tsx"],"names":["strict","name","PortalManagerContextProvider","usePortalManager","PortalManager","props","children","zIndex","ref","React","useRef","forceUpdate","parentManager","context","node","current","__DEV__","displayName"],"mappings":";;;;;AAAA;;AACA;;AACA;;;;;;qBAOyD,0BAEvD;AACAA,EAAAA,MAAM,EAAE,KADR;AAEAC,EAAAA,IAAI,EAAE;AAFN,CAFuD,C;IAAlDC,4B;IAA8BC,gB;;;;AAwBrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,aAA2C,GAAG,SAA9CA,aAA8C,CAACC,KAAD,EAAW;AAAA,MAC5DC,QAD4D,GACvCD,KADuC,CAC5DC,QAD4D;AAAA,MAClDC,MADkD,GACvCF,KADuC,CAClDE,MADkD;AAGpE;AACF;AACA;;AACE,MAAMC,GAAG,GAAGC,KAAK,CAACC,MAAN,CAA6B,IAA7B,CAAZ;AAEA,MAAMC,WAAW,GAAG,4BAApB;AAEA;AACF;AACA;;AACE,kCAAoB,YAAM;AACxBA,IAAAA,WAAW;AACZ,GAFD,EAEG,EAFH;AAIA;AACF;AACA;;AACE,MAAMC,aAAa,GAAGT,gBAAgB,EAAtC;AAEA,MAAMU,OAAO,GAAG;AACdC,IAAAA,IAAI,EAAE,CAAAF,aAAa,QAAb,YAAAA,aAAa,CAAEE,IAAf,KAAuBN,GAAG,CAACO,OADnB;AAEdR,IAAAA,MAAM,EAANA;AAFc,GAAhB;AAKA,sBACE,oBAAC,4BAAD;AAA8B,IAAA,KAAK,EAAEM;AAArC,KACGP,QADH,eAEE;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAuC,IAAA,GAAG,EAAEE;AAA5C,IAFF,CADF;AAMD,CAjCM;;;;AAmCP,IAAIQ,cAAJ,EAAa;AACXZ,EAAAA,aAAa,CAACa,WAAd,GAA4B,eAA5B;AACD","sourcesContent":["import * as React from \"react\"\nimport { createContext, __DEV__ } from \"@chakra-ui/utils\"\nimport { useSafeLayoutEffect, useForceUpdate } from \"@chakra-ui/hooks\"\n\ninterface PortalManagerContext {\n  node: HTMLElement\n  zIndex?: number\n}\n\nconst [PortalManagerContextProvider, usePortalManager] = createContext<\n  PortalManagerContext\n>({\n  strict: false,\n  name: \"PortalManagerContext\",\n})\n\nexport { usePortalManager }\n\nexport interface PortalManagerProps {\n  /**\n   * Child elements of the Portal manager\n   * Ideally, it should be at the top-level\n   * of your application\n   */\n  children?: React.ReactNode\n  /**\n   * [Z-Index war] If your has multiple elements\n   * with z-index clashing, you might need to\n   * apply a z-index to the Portal manager\n   */\n  zIndex?: number\n}\n\n/**\n * PortalManager\n *\n * Used to manage multiple portals within an application.\n * It must be render only once, at the root of your application.\n *\n * Inspired by BaseWeb's LayerManager component\n */\nexport const PortalManager: React.FC<PortalManagerProps> = (props) => {\n  const { children, zIndex } = props\n\n  /**\n   * The element that wraps the stacked layers\n   */\n  const ref = React.useRef<HTMLDivElement>(null)\n\n  const forceUpdate = useForceUpdate()\n\n  /**\n   * force an update on mount so the Provider works correctly\n   */\n  useSafeLayoutEffect(() => {\n    forceUpdate()\n  }, [])\n\n  /**\n   * let's detect if use has mutiple instances of this component\n   */\n  const parentManager = usePortalManager()\n\n  const context = {\n    node: parentManager?.node || ref.current,\n    zIndex,\n  }\n\n  return (\n    <PortalManagerContextProvider value={context}>\n      {children}\n      <div className=\"chakra-portal-manager\" ref={ref} />\n    </PortalManagerContextProvider>\n  )\n}\n\nif (__DEV__) {\n  PortalManager.displayName = \"PortalManager\"\n}\n"],"file":"portal-manager.js"}