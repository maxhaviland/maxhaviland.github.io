{"version":3,"sources":["../../src/portal.tsx"],"names":["strict","name","PortalContextProvider","usePortalContext","Portal","props","onMount","onUnmount","children","getContainer","React","useState","isBrowser","div","document","createElement","className","portal","parentPortal","manager","append","useCallback","container","appendChild","customContainer","node","body","contains","removeChild","portalChildren","zIndex","position","width","ReactDOM","createPortal","__DEV__","displayName"],"mappings":"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","sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport { createContext, isBrowser, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport * as ReactDOM from \"react-dom\"\nimport { usePortalManager } from \"./portal-manager\"\n\ntype PortalContext = HTMLDivElement | null\n\nconst [PortalContextProvider, usePortalContext] = createContext<PortalContext>({\n  strict: false,\n  name: \"PortalContext\",\n})\n\nexport interface PortalProps {\n  /**\n   * Function called when the portal mounts\n   */\n  onMount?(): void\n  /**\n   * Function called when the portal unmounts\n   */\n  onUnmount?(): void\n  /**\n   * Function that will be called to get the parent element\n   * that the portal will be attached to.\n   */\n  getContainer?: () => HTMLElement | null\n  /**\n   * The content or node you'll like to portal\n   */\n  children?: React.ReactNode\n}\n\n/**\n * Portal\n *\n * Declarative component used to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * @see Docs https://chakra-ui.com/components/portal\n */\nexport const Portal: React.FC<PortalProps> = (props) => {\n  const { onMount, onUnmount, children, getContainer } = props\n\n  /**\n   * Generate the portal's dom node. We'll wrap the children\n   * in this dom node before mounting it.\n   */\n  const [portal] = React.useState(() => {\n    if (isBrowser) {\n      const div = document.createElement(\"div\")\n      div.className = \"chakra-portal\"\n      return div\n    }\n    // for ssr\n    return null\n  })\n\n  /**\n   * This portal might be nested in another portal.\n   * Let's read from the portal context to check this.\n   */\n  const parentPortal = usePortalContext()\n\n  /**\n   * If there's a PortalManager rendered, let's read from it.\n   * We use the portal manager to manage multiple portals\n   */\n  const manager = usePortalManager()\n\n  const append = React.useCallback(\n    (container: HTMLElement | null) => {\n      // if user specified a mount node, do nothing.\n      if (!portal || !container) return\n\n      // else, simply append component to the portal node\n      container.appendChild(portal)\n    },\n    [portal],\n  )\n\n  useSafeLayoutEffect(() => {\n    // get the custom container from the container prop\n    const customContainer = getContainer?.()\n\n    /**\n     * We need to know where to mount this portal, we have 4 options:\n     * - If a mountRef is specified, we'll use that as the container\n     * - If portal is nested, use the parent portal node as container.\n     * - If it is not nested, use the manager's node as container\n     * - else use document.body as containers\n     */\n    const container =\n      customContainer ?? parentPortal ?? manager?.node ?? document.body\n\n    /**\n     * Append portal node to the computed container\n     */\n    append(container)\n\n    onMount?.()\n\n    return () => {\n      onUnmount?.()\n\n      if (!portal) return\n\n      if (container?.contains(portal)) {\n        container?.removeChild(portal)\n      }\n    }\n  }, [\n    getContainer,\n    portal,\n    parentPortal,\n    onMount,\n    onUnmount,\n    manager?.node,\n    append,\n  ])\n\n  const portalChildren = manager?.zIndex ? (\n    <div\n      className=\"chakra-portal-zIndex\"\n      style={{\n        position: \"absolute\",\n        zIndex: manager.zIndex,\n        width: \"100%\",\n      }}\n    >\n      {children}\n    </div>\n  ) : (\n    children\n  )\n\n  if (!portal) {\n    return <>{portalChildren}</>\n  }\n\n  return ReactDOM.createPortal(\n    <PortalContextProvider value={portal}>\n      {portalChildren}\n    </PortalContextProvider>,\n    portal,\n  )\n}\n\nif (__DEV__) {\n  Portal.displayName = \"Portal\"\n}\n"],"file":"portal.js"}