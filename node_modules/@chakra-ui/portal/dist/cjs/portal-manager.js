"use strict";

exports.__esModule = true;
exports.PortalManager = exports.usePortalManager = void 0;

var React = _interopRequireWildcard(require("react"));

var _utils = require("@chakra-ui/utils");

var _hooks = require("@chakra-ui/hooks");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _createContext = (0, _utils.createContext)({
  strict: false,
  name: "PortalManagerContext"
}),
    PortalManagerContextProvider = _createContext[0],
    usePortalManager = _createContext[1];

exports.usePortalManager = usePortalManager;

/**
 * PortalManager
 *
 * Used to manage multiple portals within an application.
 * It must be render only once, at the root of your application.
 *
 * Inspired by BaseWeb's LayerManager component
 */
var PortalManager = function PortalManager(props) {
  var children = props.children,
      zIndex = props.zIndex;
  /**
   * The element that wraps the stacked layers
   */

  var ref = React.useRef(null);
  var forceUpdate = (0, _hooks.useForceUpdate)();
  /**
   * force an update on mount so the Provider works correctly
   */

  (0, _hooks.useSafeLayoutEffect)(function () {
    forceUpdate();
  }, []);
  /**
   * let's detect if use has mutiple instances of this component
   */

  var parentManager = usePortalManager();
  var context = {
    node: (parentManager == null ? void 0 : parentManager.node) || ref.current,
    zIndex: zIndex
  };
  return /*#__PURE__*/React.createElement(PortalManagerContextProvider, {
    value: context
  }, children, /*#__PURE__*/React.createElement("div", {
    className: "chakra-portal-manager",
    ref: ref
  }));
};

exports.PortalManager = PortalManager;

if (_utils.__DEV__) {
  PortalManager.displayName = "PortalManager";
}
//# sourceMappingURL=portal-manager.js.map