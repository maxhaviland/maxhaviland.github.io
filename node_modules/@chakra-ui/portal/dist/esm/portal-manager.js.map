{"version":3,"sources":["../../src/portal-manager.tsx"],"names":["React","createContext","__DEV__","useSafeLayoutEffect","useForceUpdate","PortalManagerContextProvider","usePortalManager","strict","name","PortalManager","props","children","zIndex","ref","useRef","forceUpdate","parentManager","context","node","current","displayName"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,kBAAvC;AACA,SAASC,mBAAT,EAA8BC,cAA9B,QAAoD,kBAApD;AAOA,IAAM,CAACC,4BAAD,EAA+BC,gBAA/B,IAAmDL,aAAa,CAEpE;AACAM,EAAAA,MAAM,EAAE,KADR;AAEAC,EAAAA,IAAI,EAAE;AAFN,CAFoE,CAAtE;AAOA,SAASF,gBAAT;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMG,aAA2C,GAAIC,KAAD,IAAW;AACpE,MAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAuBF,KAA7B;AAEA;AACF;AACA;;AACE,MAAMG,GAAG,GAAGb,KAAK,CAACc,MAAN,CAA6B,IAA7B,CAAZ;AAEA,MAAMC,WAAW,GAAGX,cAAc,EAAlC;AAEA;AACF;AACA;;AACED,EAAAA,mBAAmB,CAAC,MAAM;AACxBY,IAAAA,WAAW;AACZ,GAFkB,EAEhB,EAFgB,CAAnB;AAIA;AACF;AACA;;AACE,MAAMC,aAAa,GAAGV,gBAAgB,EAAtC;AAEA,MAAMW,OAAO,GAAG;AACdC,IAAAA,IAAI,EAAE,CAAAF,aAAa,QAAb,YAAAA,aAAa,CAAEE,IAAf,KAAuBL,GAAG,CAACM,OADnB;AAEdP,IAAAA;AAFc,GAAhB;AAKA,sBACE,oBAAC,4BAAD;AAA8B,IAAA,KAAK,EAAEK;AAArC,KACGN,QADH,eAEE;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAuC,IAAA,GAAG,EAAEE;AAA5C,IAFF,CADF;AAMD,CAjCM;;AAmCP,IAAIX,OAAJ,EAAa;AACXO,EAAAA,aAAa,CAACW,WAAd,GAA4B,eAA5B;AACD","sourcesContent":["import * as React from \"react\"\nimport { createContext, __DEV__ } from \"@chakra-ui/utils\"\nimport { useSafeLayoutEffect, useForceUpdate } from \"@chakra-ui/hooks\"\n\ninterface PortalManagerContext {\n  node: HTMLElement\n  zIndex?: number\n}\n\nconst [PortalManagerContextProvider, usePortalManager] = createContext<\n  PortalManagerContext\n>({\n  strict: false,\n  name: \"PortalManagerContext\",\n})\n\nexport { usePortalManager }\n\nexport interface PortalManagerProps {\n  /**\n   * Child elements of the Portal manager\n   * Ideally, it should be at the top-level\n   * of your application\n   */\n  children?: React.ReactNode\n  /**\n   * [Z-Index war] If your has multiple elements\n   * with z-index clashing, you might need to\n   * apply a z-index to the Portal manager\n   */\n  zIndex?: number\n}\n\n/**\n * PortalManager\n *\n * Used to manage multiple portals within an application.\n * It must be render only once, at the root of your application.\n *\n * Inspired by BaseWeb's LayerManager component\n */\nexport const PortalManager: React.FC<PortalManagerProps> = (props) => {\n  const { children, zIndex } = props\n\n  /**\n   * The element that wraps the stacked layers\n   */\n  const ref = React.useRef<HTMLDivElement>(null)\n\n  const forceUpdate = useForceUpdate()\n\n  /**\n   * force an update on mount so the Provider works correctly\n   */\n  useSafeLayoutEffect(() => {\n    forceUpdate()\n  }, [])\n\n  /**\n   * let's detect if use has mutiple instances of this component\n   */\n  const parentManager = usePortalManager()\n\n  const context = {\n    node: parentManager?.node || ref.current,\n    zIndex,\n  }\n\n  return (\n    <PortalManagerContextProvider value={context}>\n      {children}\n      <div className=\"chakra-portal-manager\" ref={ref} />\n    </PortalManagerContextProvider>\n  )\n}\n\nif (__DEV__) {\n  PortalManager.displayName = \"PortalManager\"\n}\n"],"file":"portal-manager.js"}