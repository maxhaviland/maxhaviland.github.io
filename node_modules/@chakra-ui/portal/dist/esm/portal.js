import { useSafeLayoutEffect } from "@chakra-ui/hooks";
import { createContext, isBrowser, __DEV__ } from "@chakra-ui/utils";
import * as React from "react";
import * as ReactDOM from "react-dom";
import { usePortalManager } from "./portal-manager";
var [PortalContextProvider, usePortalContext] = createContext({
  strict: false,
  name: "PortalContext"
});

/**
 * Portal
 *
 * Declarative component used to render children into a DOM node
 * that exists outside the DOM hierarchy of the parent component.
 *
 * @see Docs https://chakra-ui.com/components/portal
 */
export var Portal = props => {
  var {
    onMount,
    onUnmount,
    children,
    getContainer
  } = props;
  /**
   * Generate the portal's dom node. We'll wrap the children
   * in this dom node before mounting it.
   */

  var [portal] = React.useState(() => {
    if (isBrowser) {
      var div = document.createElement("div");
      div.className = "chakra-portal";
      return div;
    } // for ssr


    return null;
  });
  /**
   * This portal might be nested in another portal.
   * Let's read from the portal context to check this.
   */

  var parentPortal = usePortalContext();
  /**
   * If there's a PortalManager rendered, let's read from it.
   * We use the portal manager to manage multiple portals
   */

  var manager = usePortalManager();
  var append = React.useCallback(container => {
    // if user specified a mount node, do nothing.
    if (!portal || !container) return; // else, simply append component to the portal node

    container.appendChild(portal);
  }, [portal]);
  useSafeLayoutEffect(() => {
    var _ref, _ref2;

    // get the custom container from the container prop
    var customContainer = getContainer == null ? void 0 : getContainer();
    /**
     * We need to know where to mount this portal, we have 4 options:
     * - If a mountRef is specified, we'll use that as the container
     * - If portal is nested, use the parent portal node as container.
     * - If it is not nested, use the manager's node as container
     * - else use document.body as containers
     */

    var container = (_ref = (_ref2 = customContainer != null ? customContainer : parentPortal) != null ? _ref2 : manager == null ? void 0 : manager.node) != null ? _ref : document.body;
    /**
     * Append portal node to the computed container
     */

    append(container);
    onMount == null ? void 0 : onMount();
    return () => {
      onUnmount == null ? void 0 : onUnmount();
      if (!portal) return;

      if (container == null ? void 0 : container.contains(portal)) {
        container == null ? void 0 : container.removeChild(portal);
      }
    };
  }, [getContainer, portal, parentPortal, onMount, onUnmount, manager == null ? void 0 : manager.node, append]);
  var portalChildren = (manager == null ? void 0 : manager.zIndex) ? /*#__PURE__*/React.createElement("div", {
    className: "chakra-portal-zIndex",
    style: {
      position: "absolute",
      zIndex: manager.zIndex,
      width: "100%"
    }
  }, children) : children;

  if (!portal) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, portalChildren);
  }

  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(PortalContextProvider, {
    value: portal
  }, portalChildren), portal);
};

if (__DEV__) {
  Portal.displayName = "Portal";
}
//# sourceMappingURL=portal.js.map