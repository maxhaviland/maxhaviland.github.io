{"version":3,"sources":["../../src/skeleton.tsx"],"names":["StyledSkeleton","baseStyle","boxShadow","backgroundClip","cursor","color","pointerEvents","userSelect","visibility","fade","from","opacity","to","Skeleton","props","ref","styles","startColor","endColor","isLoaded","fadeDuration","speed","className","rest","_className","animation","defaultProps","__DEV__","displayName","range","count","Array","fill","map","_","index","defaultNoOfLines","SkeletonText","noOfLines","spacing","skeletonHeight","children","noOfLinesValue","numbers","getWidth","length","number","toString","SkeletonCircle","size"],"mappings":"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","sourcesContent":["import { useBreakpointValue } from \"@chakra-ui/media-query\"\nimport {\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface SkeletonOptions {\n  /**\n   * The color at the animation start\n   */\n  startColor?: string\n  /**\n   * The color at the animation end\n   */\n  endColor?: string\n  /**\n   * If `true`, it'll render its children with a nice fade transition\n   */\n  isLoaded?: boolean\n  /**\n   * The animation speed in seconds\n   * @default\n   * 0.8\n   */\n  speed?: number\n  /**\n   * The fadeIn duration in seconds\n   *\n   * @default\n   * 0.4\n   */\n  fadeDuration?: number\n}\n\nconst StyledSkeleton = chakra(\"div\", {\n  baseStyle: {\n    boxShadow: \"none\",\n    backgroundClip: \"padding-box\",\n    cursor: \"default\",\n    color: \"transparent\",\n    pointerEvents: \"none\",\n    userSelect: \"none\",\n    \"&::before, &::after, *\": {\n      visibility: \"hidden\",\n    },\n  },\n})\n\nexport type ISkeleton = SkeletonOptions\n\nexport interface SkeletonProps\n  extends HTMLChakraProps<\"div\">,\n    SkeletonOptions,\n    ThemingProps {}\n\nconst fade = keyframes({\n  from: { opacity: 0 },\n  to: { opacity: 1 },\n})\n\nexport const Skeleton = forwardRef<SkeletonProps, \"div\">(function Skeleton(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"Skeleton\", props)\n\n  const {\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    className,\n    ...rest\n  } = omitThemingProps(props)\n\n  const _className = cx(\"chakra-skeleton\", className)\n\n  if (isLoaded) {\n    return (\n      <chakra.div\n        ref={ref}\n        className={_className}\n        __css={{ animation: `${fade} ${fadeDuration}s` }}\n        {...rest}\n      />\n    )\n  }\n\n  return (\n    <StyledSkeleton ref={ref} className={_className} {...rest} __css={styles} />\n  )\n})\n\nSkeleton.defaultProps = {\n  fadeDuration: 0.4,\n  speed: 0.8,\n}\n\nif (__DEV__) {\n  Skeleton.displayName = \"Skeleton\"\n}\n\nfunction range(count: number) {\n  return Array(count)\n    .fill(1)\n    .map((_, index) => index + 1)\n}\n\nexport interface SkeletonTextProps extends SkeletonProps {\n  spacing?: SkeletonProps[\"margin\"]\n  skeletonHeight?: SkeletonProps[\"height\"]\n  startColor?: SkeletonProps[\"startColor\"]\n  endColor?: SkeletonProps[\"endColor\"]\n  isLoaded?: SkeletonProps[\"isLoaded\"]\n}\n\nconst defaultNoOfLines = 3\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = (props) => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    children,\n    ...rest\n  } = props\n\n  const noOfLinesValue =\n    useBreakpointValue(\n      typeof noOfLines === \"number\" ? [noOfLines] : noOfLines,\n    ) || defaultNoOfLines\n  const numbers = range(noOfLinesValue)\n\n  const getWidth = (index: number) => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\"\n    }\n    return \"100%\"\n  }\n\n  const _className = cx(\"chakra-skeleton__group\", className)\n\n  return (\n    <chakra.div className={_className} {...rest}>\n      {isLoaded\n        ? children\n        : numbers.map((number) => (\n            <Skeleton\n              key={numbers.length.toString() + number}\n              height={skeletonHeight}\n              mb={number === numbers.length ? \"0\" : spacing}\n              width={getWidth(number)}\n              startColor={startColor}\n              endColor={endColor}\n              isLoaded={isLoaded}\n            />\n          ))}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  SkeletonText.displayName = \"SkeletonText\"\n}\n\nexport const SkeletonCircle: React.FC<SkeletonProps> = ({\n  size = \"2rem\",\n  ...rest\n}) => <Skeleton borderRadius=\"full\" boxSize={size} {...rest} />\n\nif (__DEV__) {\n  SkeletonCircle.displayName = \"SkeletonCircle\"\n}\n"],"file":"skeleton.js"}