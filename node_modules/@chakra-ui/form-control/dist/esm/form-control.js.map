{"version":3,"sources":["../../src/form-control.tsx"],"names":["useBoolean","useId","useSafeLayoutEffect","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","createContext","cx","__DEV__","React","FormControlProvider","useFormControlContext","strict","name","useFormControlProvider","props","id","idProp","isRequired","isInvalid","isDisabled","isLoading","isReadOnly","htmlProps","uuid","labelId","feedbackId","helpTextId","hasHelpText","setHasHelpText","isFocused","setFocus","context","onFocus","on","onBlur","off","FormControl","ref","styles","ownProps","_className","className","width","position","displayName","FormHelperText","field","undefined","helperText"],"mappings":"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","sourcesContent":["import { useBoolean, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the form control will be in its `loading` state\n   */\n  isLoading?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype ControlContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"htmlProps\"\n>\n\nconst [\n  FormControlProvider,\n  useFormControlContext,\n] = createContext<ControlContext>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\nexport { useFormControlContext }\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isLoading,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track of when the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`\n   */\n  const [hasHelpText, setHasHelpText] = useBoolean()\n\n  // Let's keep track of when we focus the form element (e.g, `input`)\n  const [isFocused, setFocus] = useBoolean()\n\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isLoading: !!isLoading,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n  }\n\n  return context\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const { htmlProps, ...context } = useFormControlProvider(ownProps)\n\n    const _className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <StylesProvider value={styles}>\n          <chakra.div\n            role=\"group\"\n            ref={ref}\n            {...htmlProps}\n            className={_className}\n            __css={{\n              width: \"100%\",\n              position: \"relative\",\n            }}\n          />\n        </StylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\"\n}\n\nexport interface HelpTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided\n */\nexport const FormHelperText = forwardRef<HelpTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useStyles()\n\n    /**\n     * Notify the field context when the help text is rendered on\n     * screen, so we can apply the correct `aria-describedby` to the field (e.g. input, textarea)\n     */\n    useSafeLayoutEffect(() => {\n      if (field?.isInvalid) {\n        return undefined\n      }\n\n      field?.setHasHelpText.on()\n      return () => field?.setHasHelpText.off()\n    }, [])\n\n    if (field?.isInvalid) {\n      return null\n    }\n\n    const _className = cx(\"chakra-form__helper-text\", props.className)\n\n    return (\n      <chakra.div\n        ref={ref}\n        __css={styles.helperText}\n        {...props}\n        className={_className}\n        id={props.id ?? field?.helpTextId}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\"\n}\n"],"file":"form-control.js"}