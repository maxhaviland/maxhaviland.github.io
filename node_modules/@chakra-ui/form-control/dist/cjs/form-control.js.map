{"version":3,"sources":["../../src/form-control.tsx"],"names":["strict","name","FormControlProvider","useFormControlContext","useFormControlProvider","props","idProp","id","isRequired","isInvalid","isDisabled","isLoading","isReadOnly","htmlProps","uuid","labelId","feedbackId","helpTextId","hasHelpText","setHasHelpText","isFocused","setFocus","context","onFocus","on","onBlur","off","FormControl","ref","styles","ownProps","_className","className","width","position","__DEV__","displayName","FormHelperText","field","undefined","helperText"],"mappings":"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","sourcesContent":["import { useBoolean, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the form control will be in its `loading` state\n   */\n  isLoading?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype ControlContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"htmlProps\"\n>\n\nconst [\n  FormControlProvider,\n  useFormControlContext,\n] = createContext<ControlContext>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\nexport { useFormControlContext }\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isLoading,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track of when the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`\n   */\n  const [hasHelpText, setHasHelpText] = useBoolean()\n\n  // Let's keep track of when we focus the form element (e.g, `input`)\n  const [isFocused, setFocus] = useBoolean()\n\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isLoading: !!isLoading,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n  }\n\n  return context\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const { htmlProps, ...context } = useFormControlProvider(ownProps)\n\n    const _className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <StylesProvider value={styles}>\n          <chakra.div\n            role=\"group\"\n            ref={ref}\n            {...htmlProps}\n            className={_className}\n            __css={{\n              width: \"100%\",\n              position: \"relative\",\n            }}\n          />\n        </StylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\"\n}\n\nexport interface HelpTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided\n */\nexport const FormHelperText = forwardRef<HelpTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useStyles()\n\n    /**\n     * Notify the field context when the help text is rendered on\n     * screen, so we can apply the correct `aria-describedby` to the field (e.g. input, textarea)\n     */\n    useSafeLayoutEffect(() => {\n      if (field?.isInvalid) {\n        return undefined\n      }\n\n      field?.setHasHelpText.on()\n      return () => field?.setHasHelpText.off()\n    }, [])\n\n    if (field?.isInvalid) {\n      return null\n    }\n\n    const _className = cx(\"chakra-form__helper-text\", props.className)\n\n    return (\n      <chakra.div\n        ref={ref}\n        __css={styles.helperText}\n        {...props}\n        className={_className}\n        id={props.id ?? field?.helpTextId}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\"\n}\n"],"file":"form-control.js"}