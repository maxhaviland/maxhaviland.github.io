{"version":3,"sources":["../../src/use-pin-input.ts"],"names":["name","errorMessage","PinInputProvider","usePinInputContext","toArray","value","split","undefined","usePinInput","props","autoFocus","defaultValue","onChange","onComplete","placeholder","manageFocus","idProp","id","isDisabled","isInvalid","uuid","domContext","descendants","moveFocus","setMoveFocus","values","join","setValues","firstInput","element","focus","focusNext","index","nextInput","setValue","nextValues","length","clear","Array","fill","usePinInputField","forwardedRef","ref","rest","context","current","getNextValue","currentValue","eventValue","nextValue","firstValue","secondValue","event","target","match","filter","_","i","onKeyDown","key","prevInput","hasFocus","setHasFocus","onFocus","onBlur","disabled","inputMode","autoComplete"],"mappings":"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","sourcesContent":["import { useDescendants, useDescendant } from \"@chakra-ui/descendant\"\nimport { useControllableState, useId } from \"@chakra-ui/hooks\"\nimport {\n  mergeRefs,\n  callAllHandlers,\n  createContext,\n  ariaAttr,\n} from \"@chakra-ui/utils\"\nimport {\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n  ChangeEvent,\n  ChangeEventHandler,\n  KeyboardEventHandler,\n  KeyboardEvent,\n  InputHTMLAttributes,\n  FocusEventHandler,\n  Ref,\n} from \"react\"\n\nexport type PinInputContext = UsePinInputReturn & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nconst [PinInputProvider, usePinInputContext] = createContext<PinInputContext>({\n  name: \"PinInputContext\",\n  errorMessage:\n    \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n})\n\nexport { PinInputProvider, usePinInputContext }\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * The base id string that will be applied to the input fields.\n   * The index of the input will be appended to this base id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n}\n\nfunction toArray(value?: string) {\n  if (typeof value === \"string\") {\n    return value.split(\"\")\n  }\n  return undefined\n}\n\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"â—‹\",\n    manageFocus = true,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const domContext = useDescendants<HTMLInputElement, {}>()\n  const { descendants } = domContext\n\n  const [moveFocus, setMoveFocus] = useState(true)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  useEffect(() => {\n    if (autoFocus) {\n      const firstInput = descendants[0]\n      firstInput?.element?.focus()\n    }\n  }, [descendants, autoFocus])\n\n  const focusNext = useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n\n      const nextInput = descendants[index + 1]\n      nextInput?.element?.focus()\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = useCallback(\n    (value: string, index: number) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      // if we're at the last input, call onComplete (no need to move focus)\n      if (index === descendants.length - 1) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants.length],\n  )\n\n  const clear = useCallback(() => {\n    const values: string[] = Array(descendants.length).fill(\"\")\n    setValues(values)\n    const firstInput = descendants[0]\n    firstInput.element?.focus()\n  }, [descendants, setValues])\n\n  return {\n    id,\n    domContext,\n    setValue,\n    values,\n    setValues,\n    setMoveFocus,\n    clear,\n    onComplete,\n    placeholder,\n    manageFocus,\n    isDisabled,\n    isInvalid,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps {\n  ref?: Ref<HTMLInputElement>\n  onChange?: ChangeEventHandler\n  onKeyDown?: KeyboardEventHandler\n  onFocus?: FocusEventHandler\n  onBlur?: FocusEventHandler\n}\n\nexport function usePinInputField(props: UsePinInputFieldProps = {}) {\n  const { ref: forwardedRef, ...rest } = props\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const {\n    id,\n    isDisabled,\n    isInvalid,\n    setValue,\n    values,\n    setMoveFocus,\n    setValues,\n    domContext,\n    placeholder,\n    manageFocus,\n  } = usePinInputContext()\n\n  const { descendants } = domContext\n\n  const index = useDescendant({\n    context: domContext,\n    element: ref.current,\n  })\n\n  const getNextValue = useCallback(\n    (currentValue: string, eventValue: string) => {\n      let nextValue = eventValue\n      if (currentValue && currentValue.length > 0) {\n        const [firstValue, secondValue] = eventValue\n        if (currentValue[0] === firstValue) {\n          nextValue = secondValue\n        } else if (currentValue[0] === secondValue) {\n          nextValue = firstValue\n        }\n      }\n      return nextValue\n    },\n    [],\n  )\n\n  // Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n  const onChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const eventValue = event.target.value\n      const currentValue = values[index]\n      const nextValue = getNextValue(currentValue, eventValue)\n\n      // if the value was removed using backspace\n      if (nextValue === \"\") {\n        setValue(\"\", index)\n        return\n      }\n\n      // in the case of an autocomplete or copy and paste\n      if (eventValue.length > 2) {\n        // see if we can use the string to fill out our values\n        if (eventValue.match(/^[0-9]+$/)) {\n          const { length } = descendants\n          // ensure the value matches the number of inputs\n          const nextValue = eventValue.split(\"\").filter((_, i) => i < length)\n          setValues(nextValue)\n        }\n        return\n      }\n\n      // only set if the new value is a number\n      if (nextValue.match(/^[0-9]$/)) {\n        setValue(nextValue, index)\n      }\n\n      setMoveFocus(true)\n    },\n    [\n      values,\n      index,\n      getNextValue,\n      setMoveFocus,\n      setValue,\n      descendants.length,\n      setValues,\n    ],\n  )\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \"Backspace\" && manageFocus) {\n        if ((event.target as HTMLInputElement).value === \"\") {\n          const prevInput = descendants[index - 1]\n          if (prevInput) {\n            setValue(\"\", index - 1)\n            prevInput.element?.focus()\n            setMoveFocus(true)\n          }\n        } else {\n          setMoveFocus(false)\n        }\n      }\n    },\n    [descendants, index, setValue, setMoveFocus, manageFocus],\n  )\n\n  const [hasFocus, setHasFocus] = useState(false)\n\n  const onFocus = useCallback(() => {\n    setHasFocus(true)\n  }, [])\n\n  const onBlur = useCallback(() => {\n    setHasFocus(false)\n  }, [])\n\n  return {\n    ...rest,\n    id: `${id}-${index}`,\n    disabled: isDisabled,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    ref: mergeRefs(ref, forwardedRef),\n    onChange: callAllHandlers(rest.onChange, onChange),\n    onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n    onFocus: callAllHandlers(rest.onFocus, onFocus),\n    onBlur: callAllHandlers(rest.onBlur, onBlur),\n    value: values[index] || \"\",\n    inputMode: \"numeric\" as InputHTMLAttributes<any>[\"inputMode\"],\n    \"aria-label\": rest[\"aria-label\"] || \"Please enter your pin code\",\n    autoComplete: \"not-allowed\",\n    placeholder: hasFocus ? \"\" : placeholder,\n  }\n}\n"],"file":"use-pin-input.js"}