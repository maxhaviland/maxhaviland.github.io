"use strict";

exports.__esModule = true;
exports.usePinInput = usePinInput;
exports.usePinInputField = usePinInputField;
exports.usePinInputContext = exports.PinInputProvider = void 0;

var _descendant = require("@chakra-ui/descendant");

var _hooks = require("@chakra-ui/hooks");

var _utils = require("@chakra-ui/utils");

var _react = require("react");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var _createContext = (0, _utils.createContext)({
  name: "PinInputContext",
  errorMessage: "usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`"
}),
    PinInputProvider = _createContext[0],
    usePinInputContext = _createContext[1];

exports.usePinInputContext = usePinInputContext;
exports.PinInputProvider = PinInputProvider;

function toArray(value) {
  if (typeof value === "string") {
    return value.split("");
  }

  return undefined;
}

function usePinInput(props) {
  if (props === void 0) {
    props = {};
  }

  var _props = props,
      autoFocus = _props.autoFocus,
      value = _props.value,
      defaultValue = _props.defaultValue,
      _onChange = _props.onChange,
      onComplete = _props.onComplete,
      _props$placeholder = _props.placeholder,
      placeholder = _props$placeholder === void 0 ? "â—‹" : _props$placeholder,
      _props$manageFocus = _props.manageFocus,
      manageFocus = _props$manageFocus === void 0 ? true : _props$manageFocus,
      idProp = _props.id,
      isDisabled = _props.isDisabled,
      isInvalid = _props.isInvalid;
  var uuid = (0, _hooks.useId)();
  var id = idProp != null ? idProp : "pin-input-" + uuid;
  var domContext = (0, _descendant.useDescendants)();
  var descendants = domContext.descendants;

  var _useState = (0, _react.useState)(true),
      moveFocus = _useState[0],
      setMoveFocus = _useState[1];

  var _useControllableState = (0, _hooks.useControllableState)({
    defaultValue: toArray(defaultValue) || [],
    value: toArray(value),
    onChange: function onChange(values) {
      return _onChange == null ? void 0 : _onChange(values.join(""));
    }
  }),
      values = _useControllableState[0],
      setValues = _useControllableState[1];

  (0, _react.useEffect)(function () {
    if (autoFocus) {
      var _firstInput$element;

      var firstInput = descendants[0];
      firstInput == null ? void 0 : (_firstInput$element = firstInput.element) == null ? void 0 : _firstInput$element.focus();
    }
  }, [descendants, autoFocus]);
  var focusNext = (0, _react.useCallback)(function (index) {
    var _nextInput$element;

    if (!moveFocus || !manageFocus) return;
    var nextInput = descendants[index + 1];
    nextInput == null ? void 0 : (_nextInput$element = nextInput.element) == null ? void 0 : _nextInput$element.focus();
  }, [descendants, moveFocus, manageFocus]);
  var setValue = (0, _react.useCallback)(function (value, index) {
    var nextValues = [].concat(values);
    nextValues[index] = value;
    setValues(nextValues); // if we're at the last input, call onComplete (no need to move focus)

    if (index === descendants.length - 1) {
      onComplete == null ? void 0 : onComplete(nextValues.join(""));
    } else {
      focusNext(index);
    }
  }, [values, setValues, focusNext, onComplete, descendants.length]);
  var clear = (0, _react.useCallback)(function () {
    var _firstInput$element2;

    var values = Array(descendants.length).fill("");
    setValues(values);
    var firstInput = descendants[0];
    (_firstInput$element2 = firstInput.element) == null ? void 0 : _firstInput$element2.focus();
  }, [descendants, setValues]);
  return {
    id: id,
    domContext: domContext,
    setValue: setValue,
    values: values,
    setValues: setValues,
    setMoveFocus: setMoveFocus,
    clear: clear,
    onComplete: onComplete,
    placeholder: placeholder,
    manageFocus: manageFocus,
    isDisabled: isDisabled,
    isInvalid: isInvalid
  };
}

function usePinInputField(props) {
  if (props === void 0) {
    props = {};
  }

  var _props2 = props,
      forwardedRef = _props2.ref,
      rest = _objectWithoutPropertiesLoose(_props2, ["ref"]);

  var ref = (0, _react.useRef)(null);

  var _usePinInputContext = usePinInputContext(),
      id = _usePinInputContext.id,
      isDisabled = _usePinInputContext.isDisabled,
      isInvalid = _usePinInputContext.isInvalid,
      setValue = _usePinInputContext.setValue,
      values = _usePinInputContext.values,
      setMoveFocus = _usePinInputContext.setMoveFocus,
      setValues = _usePinInputContext.setValues,
      domContext = _usePinInputContext.domContext,
      placeholder = _usePinInputContext.placeholder,
      manageFocus = _usePinInputContext.manageFocus;

  var descendants = domContext.descendants;
  var index = (0, _descendant.useDescendant)({
    context: domContext,
    element: ref.current
  });
  var getNextValue = (0, _react.useCallback)(function (currentValue, eventValue) {
    var nextValue = eventValue;

    if (currentValue && currentValue.length > 0) {
      var firstValue = eventValue[0],
          secondValue = eventValue[1];

      if (currentValue[0] === firstValue) {
        nextValue = secondValue;
      } else if (currentValue[0] === secondValue) {
        nextValue = firstValue;
      }
    }

    return nextValue;
  }, []); // Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js

  var onChange = (0, _react.useCallback)(function (event) {
    var eventValue = event.target.value;
    var currentValue = values[index];
    var nextValue = getNextValue(currentValue, eventValue); // if the value was removed using backspace

    if (nextValue === "") {
      setValue("", index);
      return;
    } // in the case of an autocomplete or copy and paste


    if (eventValue.length > 2) {
      // see if we can use the string to fill out our values
      if (eventValue.match(/^[0-9]+$/)) {
        var length = descendants.length; // ensure the value matches the number of inputs

        var _nextValue = eventValue.split("").filter(function (_, i) {
          return i < length;
        });

        setValues(_nextValue);
      }

      return;
    } // only set if the new value is a number


    if (nextValue.match(/^[0-9]$/)) {
      setValue(nextValue, index);
    }

    setMoveFocus(true);
  }, [values, index, getNextValue, setMoveFocus, setValue, descendants.length, setValues]);
  var onKeyDown = (0, _react.useCallback)(function (event) {
    if (event.key === "Backspace" && manageFocus) {
      if (event.target.value === "") {
        var prevInput = descendants[index - 1];

        if (prevInput) {
          var _prevInput$element;

          setValue("", index - 1);
          (_prevInput$element = prevInput.element) == null ? void 0 : _prevInput$element.focus();
          setMoveFocus(true);
        }
      } else {
        setMoveFocus(false);
      }
    }
  }, [descendants, index, setValue, setMoveFocus, manageFocus]);

  var _useState2 = (0, _react.useState)(false),
      hasFocus = _useState2[0],
      setHasFocus = _useState2[1];

  var onFocus = (0, _react.useCallback)(function () {
    setHasFocus(true);
  }, []);
  var onBlur = (0, _react.useCallback)(function () {
    setHasFocus(false);
  }, []);
  return _extends({}, rest, {
    id: id + "-" + index,
    disabled: isDisabled,
    "aria-invalid": (0, _utils.ariaAttr)(isInvalid),
    ref: (0, _utils.mergeRefs)(ref, forwardedRef),
    onChange: (0, _utils.callAllHandlers)(rest.onChange, onChange),
    onKeyDown: (0, _utils.callAllHandlers)(rest.onKeyDown, onKeyDown),
    onFocus: (0, _utils.callAllHandlers)(rest.onFocus, onFocus),
    onBlur: (0, _utils.callAllHandlers)(rest.onBlur, onBlur),
    value: values[index] || "",
    inputMode: "numeric",
    "aria-label": rest["aria-label"] || "Please enter your pin code",
    autoComplete: "not-allowed",
    placeholder: hasFocus ? "" : placeholder
  });
}
//# sourceMappingURL=use-pin-input.js.map