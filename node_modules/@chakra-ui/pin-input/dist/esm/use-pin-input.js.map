{"version":3,"sources":["../../src/use-pin-input.ts"],"names":["useDescendants","useDescendant","useControllableState","useId","mergeRefs","callAllHandlers","createContext","ariaAttr","useState","useEffect","useRef","useCallback","PinInputProvider","usePinInputContext","name","errorMessage","toArray","value","split","undefined","usePinInput","props","autoFocus","defaultValue","onChange","onComplete","placeholder","manageFocus","id","idProp","isDisabled","isInvalid","uuid","domContext","descendants","moveFocus","setMoveFocus","values","setValues","join","firstInput","element","focus","focusNext","index","nextInput","setValue","nextValues","length","clear","Array","fill","usePinInputField","ref","forwardedRef","rest","context","current","getNextValue","currentValue","eventValue","nextValue","firstValue","secondValue","event","target","match","filter","_","i","onKeyDown","key","prevInput","hasFocus","setHasFocus","onFocus","onBlur","disabled","inputMode","autoComplete"],"mappings":"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","sourcesContent":["import { useDescendants, useDescendant } from \"@chakra-ui/descendant\"\nimport { useControllableState, useId } from \"@chakra-ui/hooks\"\nimport {\n  mergeRefs,\n  callAllHandlers,\n  createContext,\n  ariaAttr,\n} from \"@chakra-ui/utils\"\nimport {\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n  ChangeEvent,\n  ChangeEventHandler,\n  KeyboardEventHandler,\n  KeyboardEvent,\n  InputHTMLAttributes,\n  FocusEventHandler,\n  Ref,\n} from \"react\"\n\nexport type PinInputContext = UsePinInputReturn & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nconst [PinInputProvider, usePinInputContext] = createContext<PinInputContext>({\n  name: \"PinInputContext\",\n  errorMessage:\n    \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n})\n\nexport { PinInputProvider, usePinInputContext }\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * The base id string that will be applied to the input fields.\n   * The index of the input will be appended to this base id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n}\n\nfunction toArray(value?: string) {\n  if (typeof value === \"string\") {\n    return value.split(\"\")\n  }\n  return undefined\n}\n\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"â—‹\",\n    manageFocus = true,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const domContext = useDescendants<HTMLInputElement, {}>()\n  const { descendants } = domContext\n\n  const [moveFocus, setMoveFocus] = useState(true)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  useEffect(() => {\n    if (autoFocus) {\n      const firstInput = descendants[0]\n      firstInput?.element?.focus()\n    }\n  }, [descendants, autoFocus])\n\n  const focusNext = useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n\n      const nextInput = descendants[index + 1]\n      nextInput?.element?.focus()\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = useCallback(\n    (value: string, index: number) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      // if we're at the last input, call onComplete (no need to move focus)\n      if (index === descendants.length - 1) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants.length],\n  )\n\n  const clear = useCallback(() => {\n    const values: string[] = Array(descendants.length).fill(\"\")\n    setValues(values)\n    const firstInput = descendants[0]\n    firstInput.element?.focus()\n  }, [descendants, setValues])\n\n  return {\n    id,\n    domContext,\n    setValue,\n    values,\n    setValues,\n    setMoveFocus,\n    clear,\n    onComplete,\n    placeholder,\n    manageFocus,\n    isDisabled,\n    isInvalid,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps {\n  ref?: Ref<HTMLInputElement>\n  onChange?: ChangeEventHandler\n  onKeyDown?: KeyboardEventHandler\n  onFocus?: FocusEventHandler\n  onBlur?: FocusEventHandler\n}\n\nexport function usePinInputField(props: UsePinInputFieldProps = {}) {\n  const { ref: forwardedRef, ...rest } = props\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const {\n    id,\n    isDisabled,\n    isInvalid,\n    setValue,\n    values,\n    setMoveFocus,\n    setValues,\n    domContext,\n    placeholder,\n    manageFocus,\n  } = usePinInputContext()\n\n  const { descendants } = domContext\n\n  const index = useDescendant({\n    context: domContext,\n    element: ref.current,\n  })\n\n  const getNextValue = useCallback(\n    (currentValue: string, eventValue: string) => {\n      let nextValue = eventValue\n      if (currentValue && currentValue.length > 0) {\n        const [firstValue, secondValue] = eventValue\n        if (currentValue[0] === firstValue) {\n          nextValue = secondValue\n        } else if (currentValue[0] === secondValue) {\n          nextValue = firstValue\n        }\n      }\n      return nextValue\n    },\n    [],\n  )\n\n  // Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n  const onChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const eventValue = event.target.value\n      const currentValue = values[index]\n      const nextValue = getNextValue(currentValue, eventValue)\n\n      // if the value was removed using backspace\n      if (nextValue === \"\") {\n        setValue(\"\", index)\n        return\n      }\n\n      // in the case of an autocomplete or copy and paste\n      if (eventValue.length > 2) {\n        // see if we can use the string to fill out our values\n        if (eventValue.match(/^[0-9]+$/)) {\n          const { length } = descendants\n          // ensure the value matches the number of inputs\n          const nextValue = eventValue.split(\"\").filter((_, i) => i < length)\n          setValues(nextValue)\n        }\n        return\n      }\n\n      // only set if the new value is a number\n      if (nextValue.match(/^[0-9]$/)) {\n        setValue(nextValue, index)\n      }\n\n      setMoveFocus(true)\n    },\n    [\n      values,\n      index,\n      getNextValue,\n      setMoveFocus,\n      setValue,\n      descendants.length,\n      setValues,\n    ],\n  )\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \"Backspace\" && manageFocus) {\n        if ((event.target as HTMLInputElement).value === \"\") {\n          const prevInput = descendants[index - 1]\n          if (prevInput) {\n            setValue(\"\", index - 1)\n            prevInput.element?.focus()\n            setMoveFocus(true)\n          }\n        } else {\n          setMoveFocus(false)\n        }\n      }\n    },\n    [descendants, index, setValue, setMoveFocus, manageFocus],\n  )\n\n  const [hasFocus, setHasFocus] = useState(false)\n\n  const onFocus = useCallback(() => {\n    setHasFocus(true)\n  }, [])\n\n  const onBlur = useCallback(() => {\n    setHasFocus(false)\n  }, [])\n\n  return {\n    ...rest,\n    id: `${id}-${index}`,\n    disabled: isDisabled,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    ref: mergeRefs(ref, forwardedRef),\n    onChange: callAllHandlers(rest.onChange, onChange),\n    onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n    onFocus: callAllHandlers(rest.onFocus, onFocus),\n    onBlur: callAllHandlers(rest.onBlur, onBlur),\n    value: values[index] || \"\",\n    inputMode: \"numeric\" as InputHTMLAttributes<any>[\"inputMode\"],\n    \"aria-label\": rest[\"aria-label\"] || \"Please enter your pin code\",\n    autoComplete: \"not-allowed\",\n    placeholder: hasFocus ? \"\" : placeholder,\n  }\n}\n"],"file":"use-pin-input.js"}