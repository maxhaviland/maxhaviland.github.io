import { ChangeEvent, ChangeEventHandler, KeyboardEventHandler, KeyboardEvent, FocusEventHandler, Ref } from "react";
export declare type PinInputContext = UsePinInputReturn & {
    /**
     * Sets the pin input component to the disabled state
     */
    isDisabled?: boolean;
    /**
     * Sets the pin input component to the invalid state
     */
    isInvalid?: boolean;
};
declare const PinInputProvider: import("react").Provider<PinInputContext>, usePinInputContext: () => PinInputContext;
export { PinInputProvider, usePinInputContext };
export interface UsePinInputProps {
    /**
     * If `true`, the pin input receives focus on mount
     */
    autoFocus?: boolean;
    /**
     * The value of the the pin input. This is the value
     * that will be returned when the pin input is filled
     */
    value?: string;
    /**
     * The default value of the pin input
     */
    defaultValue?: string;
    /**
     * Function called on input change
     */
    onChange?: (value: string) => void;
    /**
     * Function called when all inputs have valid values
     */
    onComplete?: (value: string) => void;
    /**
     * The placeholder for the pin input
     */
    placeholder?: string;
    /**
     * If `true`, focus will move automatically to the next input once filled
     * @default true
     */
    manageFocus?: boolean;
    /**
     * The base id string that will be applied to the input fields.
     * The index of the input will be appended to this base id.
     *
     * @example
     * if id="foo", the first input will have `foo-0`
     */
    id?: string;
    /**
     * If `true`, the pin input component is put in the disabled state
     */
    isDisabled?: boolean;
    /**
     * If `true`, the pin input component is put in the invalid state
     */
    isInvalid?: boolean;
}
export declare function usePinInput(props?: UsePinInputProps): {
    id: string;
    domContext: {
        descendants: {
            element: HTMLInputElement | null;
            index?: number | undefined;
            disabled?: boolean | undefined;
            focusable?: boolean | undefined;
        }[];
        register: ({ element, ...rest }: {
            element: HTMLInputElement | null;
            index?: number | undefined;
            disabled?: boolean | undefined;
            focusable?: boolean | undefined;
        }) => void;
        unregister: (element: HTMLInputElement) => void;
    };
    setValue: (value: string, index: number) => void;
    values: string[];
    setValues: import("react").Dispatch<import("react").SetStateAction<string[]>>;
    setMoveFocus: import("react").Dispatch<import("react").SetStateAction<boolean>>;
    clear: () => void;
    onComplete: ((value: string) => void) | undefined;
    placeholder: string;
    manageFocus: boolean;
    isDisabled: boolean | undefined;
    isInvalid: boolean | undefined;
};
export declare type UsePinInputReturn = ReturnType<typeof usePinInput>;
export interface UsePinInputFieldProps {
    ref?: Ref<HTMLInputElement>;
    onChange?: ChangeEventHandler;
    onKeyDown?: KeyboardEventHandler;
    onFocus?: FocusEventHandler;
    onBlur?: FocusEventHandler;
}
export declare function usePinInputField(props?: UsePinInputFieldProps): {
    id: string;
    disabled: boolean | undefined;
    "aria-invalid": true | undefined;
    ref: (value: HTMLInputElement) => void;
    onChange: (event: ChangeEvent<HTMLInputElement>) => void;
    onKeyDown: (event: KeyboardEvent<Element>) => void;
    onFocus: (event: import("react").FocusEvent<Element>) => void;
    onBlur: (event: import("react").FocusEvent<Element>) => void;
    value: string;
    inputMode: "numeric" | "none" | "text" | "tel" | "url" | "email" | "decimal" | "search" | undefined;
    "aria-label": any;
    autoComplete: string;
    placeholder: string;
};
