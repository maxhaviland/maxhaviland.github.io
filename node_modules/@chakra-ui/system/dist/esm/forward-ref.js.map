{"version":3,"sources":["../../src/forward-ref.tsx"],"names":["React","forwardRef","component"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AA6BA,OAAO,SAASC,UAAT,CACLC,SADK,EAML;AACA,sBAAQF,KAAK,CAACC,UAAN,CAAiBC,SAAjB,CAAR;AAID","sourcesContent":["/**\n * All credit goes to Chance (Reach UI), and Haz (Reakit) for creating\n * the base type definitions upon which we improved on\n */\nimport * as React from \"react\"\n\ntype As = React.ElementType\n\ntype PropsOf<T extends As> = React.ComponentProps<T>\n\ntype AddProps<P> = React.PropsWithChildren<\n  P extends { transition?: any } ? Omit<P, \"transition\"> : P\n>\n\ntype AddTProps<T extends As> = PropsOf<T> extends { color?: any }\n  ? Omit<PropsOf<T>, \"color\">\n  : PropsOf<T>\n\nexport interface ComponentWithAs<T extends As, P> {\n  <TT extends As>(\n    props: { as?: TT } & (PropsOf<T> extends { transition?: any }\n      ? Omit<P, \"transition\">\n      : P) &\n      Omit<PropsOf<TT>, keyof PropsOf<T>> &\n      Omit<AddTProps<T>, keyof P>,\n  ): JSX.Element\n  displayName?: string\n  propTypes?: React.WeakValidationMap<AddProps<P> & AddTProps<T>>\n  contextTypes?: React.ValidationMap<any>\n  defaultProps?: AddProps<P> & AddTProps<T> & { as?: As }\n  id?: string\n}\n\nexport function forwardRef<P, T extends As>(\n  component: (\n    props: React.PropsWithChildren<P> &\n      Omit<PropsOf<T>, keyof P | \"color\" | \"ref\"> & { as?: As },\n    ref: React.Ref<any>,\n  ) => React.ReactElement | null,\n) {\n  return (React.forwardRef(component as any) as unknown) as ComponentWithAs<\n    T,\n    P\n  >\n}\n"],"file":"forward-ref.js"}