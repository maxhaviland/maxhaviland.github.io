{"version":3,"sources":["../../src/use-event-listener.ts"],"names":["React","isBrowser","useLatestRef","useEventListener","event","handler","doc","options","document","savedHandler","useEffect","undefined","listener","current","addEventListener","removeEventListener"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CACLC,KADK,EAELC,OAFK,EAGLC,GAHK,EAILC,OAJK,EAKL;AAAA,MAFAD,GAEA;AAFAA,IAAAA,GAEA,GAFqCL,SAAS,GAAGO,QAAH,GAAc,IAE5D;AAAA;;AACA,MAAMC,YAAY,GAAGP,YAAY,CAACG,OAAD,CAAjC;AAEAL,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACJ,GAAL,EAAU,OAAOK,SAAP;;AAEV,QAAMC,QAAQ,GAAIR,KAAD,IAAgB;AAC/BK,MAAAA,YAAY,CAACI,OAAb,oBAAAJ,YAAY,CAACI,OAAb,CAAuBT,KAAvB;AACD,KAFD;;AAIAE,IAAAA,GAAG,CAACQ,gBAAJ,CAAqBV,KAArB,EAA4BQ,QAA5B,EAAsCL,OAAtC;AAEA,WAAO,MAAM;AACXD,MAAAA,GAAG,CAACS,mBAAJ,CAAwBX,KAAxB,EAA+BQ,QAA/B,EAAyCL,OAAzC;AACD,KAFD;AAGD,GAZD,EAYG,CAACH,KAAD,EAAQE,GAAR,EAAaC,OAAb,EAAsBE,YAAtB,CAZH;AAcA,SAAO,MAAM;AACX,QAAIA,YAAY,CAACI,OAAjB,EAA0B;AAAA;;AACxB,cAAAP,GAAG,SAAH,iBAAKS,mBAAL,CAAyBX,KAAzB,EAAgCK,YAAY,CAACI,OAA7C,EAA6DN,OAA7D;AACD;AACF,GAJD;AAKD","sourcesContent":["import * as React from \"react\"\nimport { isBrowser } from \"@chakra-ui/utils\"\nimport { useLatestRef } from \"./use-latest-ref\"\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n */\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  event: K,\n  handler: (event: DocumentEventMap[K]) => void,\n  doc: Document | HTMLElement | null = isBrowser ? document : null,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const savedHandler = useLatestRef(handler)\n\n  React.useEffect(() => {\n    if (!doc) return undefined\n\n    const listener = (event: any) => {\n      savedHandler.current?.(event)\n    }\n\n    doc.addEventListener(event, listener, options)\n\n    return () => {\n      doc.removeEventListener(event, listener, options)\n    }\n  }, [event, doc, options, savedHandler])\n\n  return () => {\n    if (savedHandler.current) {\n      doc?.removeEventListener(event, savedHandler.current as any, options)\n    }\n  }\n}\n"],"file":"use-event-listener.js"}