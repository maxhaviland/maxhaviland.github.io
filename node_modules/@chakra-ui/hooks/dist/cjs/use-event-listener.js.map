{"version":3,"sources":["../../src/use-event-listener.ts"],"names":["useEventListener","event","handler","doc","options","isBrowser","document","savedHandler","React","useEffect","undefined","listener","current","addEventListener","removeEventListener"],"mappings":";;;;;AAAA;;AACA;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,gBAAT,CACLC,KADK,EAELC,OAFK,EAGLC,GAHK,EAILC,OAJK,EAKL;AAAA,MAFAD,GAEA;AAFAA,IAAAA,GAEA,GAFqCE,mBAAYC,QAAZ,GAAuB,IAE5D;AAAA;;AACA,MAAMC,YAAY,GAAG,gCAAaL,OAAb,CAArB;AAEAM,EAAAA,KAAK,CAACC,SAAN,CAAgB,YAAM;AACpB,QAAI,CAACN,GAAL,EAAU,OAAOO,SAAP;;AAEV,QAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACV,KAAD,EAAgB;AAC/BM,MAAAA,YAAY,CAACK,OAAb,oBAAAL,YAAY,CAACK,OAAb,CAAuBX,KAAvB;AACD,KAFD;;AAIAE,IAAAA,GAAG,CAACU,gBAAJ,CAAqBZ,KAArB,EAA4BU,QAA5B,EAAsCP,OAAtC;AAEA,WAAO,YAAM;AACXD,MAAAA,GAAG,CAACW,mBAAJ,CAAwBb,KAAxB,EAA+BU,QAA/B,EAAyCP,OAAzC;AACD,KAFD;AAGD,GAZD,EAYG,CAACH,KAAD,EAAQE,GAAR,EAAaC,OAAb,EAAsBG,YAAtB,CAZH;AAcA,SAAO,YAAM;AACX,QAAIA,YAAY,CAACK,OAAjB,EAA0B;AAAA;;AACxB,cAAAT,GAAG,SAAH,iBAAKW,mBAAL,CAAyBb,KAAzB,EAAgCM,YAAY,CAACK,OAA7C,EAA6DR,OAA7D;AACD;AACF,GAJD;AAKD","sourcesContent":["import * as React from \"react\"\nimport { isBrowser } from \"@chakra-ui/utils\"\nimport { useLatestRef } from \"./use-latest-ref\"\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n */\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  event: K,\n  handler: (event: DocumentEventMap[K]) => void,\n  doc: Document | HTMLElement | null = isBrowser ? document : null,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const savedHandler = useLatestRef(handler)\n\n  React.useEffect(() => {\n    if (!doc) return undefined\n\n    const listener = (event: any) => {\n      savedHandler.current?.(event)\n    }\n\n    doc.addEventListener(event, listener, options)\n\n    return () => {\n      doc.removeEventListener(event, listener, options)\n    }\n  }, [event, doc, options, savedHandler])\n\n  return () => {\n    if (savedHandler.current) {\n      doc?.removeEventListener(event, savedHandler.current as any, options)\n    }\n  }\n}\n"],"file":"use-event-listener.js"}