"use strict";

exports.__esModule = true;
exports.useEventListener = useEventListener;

var React = _interopRequireWildcard(require("react"));

var _utils = require("@chakra-ui/utils");

var _useLatestRef = require("./use-latest-ref");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * React hook to manage browser event listeners
 *
 * @param event the event name
 * @param handler the event handler function to execute
 * @param doc the dom environment to execute against (defaults to `document`)
 * @param options the event listener options
 */
function useEventListener(event, handler, doc, options) {
  if (doc === void 0) {
    doc = _utils.isBrowser ? document : null;
  }

  var savedHandler = (0, _useLatestRef.useLatestRef)(handler);
  React.useEffect(function () {
    if (!doc) return undefined;

    var listener = function listener(event) {
      savedHandler.current == null ? void 0 : savedHandler.current(event);
    };

    doc.addEventListener(event, listener, options);
    return function () {
      doc.removeEventListener(event, listener, options);
    };
  }, [event, doc, options, savedHandler]);
  return function () {
    if (savedHandler.current) {
      var _doc;

      (_doc = doc) == null ? void 0 : _doc.removeEventListener(event, savedHandler.current, options);
    }
  };
}
//# sourceMappingURL=use-event-listener.js.map