{"version":3,"sources":["../../src/use-timeout.ts"],"names":["useTimeout","callback","delay","savedCallback","React","useEffect","undefined","timeoutId","window","setTimeout","current","clearTimeout"],"mappings":";;;;;AAAA;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,UAAT,CAAoBC,QAApB,EAAwCC,KAAxC,EAA8D;AACnE,MAAMC,aAAa,GAAG,gCAAaF,QAAb,CAAtB;AAEAG,EAAAA,KAAK,CAACC,SAAN,CAAgB,YAAM;AACpB,QAAIH,KAAK,IAAI,IAAb,EAAmB,OAAOI,SAAP;AAEnB,QAAIC,SAAwB,GAAG,IAA/B;AAEAA,IAAAA,SAAS,GAAGC,MAAM,CAACC,UAAP,CAAkB,YAAM;AAClCN,MAAAA,aAAa,CAACO,OAAd,oBAAAP,aAAa,CAACO,OAAd;AACD,KAFW,EAETR,KAFS,CAAZ;AAIA,WAAO,YAAM;AACX,UAAIK,SAAJ,EAAe;AACbC,QAAAA,MAAM,CAACG,YAAP,CAAoBJ,SAApB;AACD;AACF,KAJD;AAKD,GAdD,EAcG,CAACL,KAAD,EAAQC,aAAR,CAdH;AAeD","sourcesContent":["import * as React from \"react\"\nimport { useLatestRef } from \"./use-latest-ref\"\n\n/**\n * React hook that provides a declarative `setTimeout`\n *\n * @param callback the callback to run after specified delay\n * @param delay the delay (in ms)\n */\nexport function useTimeout(callback: Function, delay: number | null) {\n  const savedCallback = useLatestRef(callback)\n\n  React.useEffect(() => {\n    if (delay == null) return undefined\n\n    let timeoutId: number | null = null\n\n    timeoutId = window.setTimeout(() => {\n      savedCallback.current?.()\n    }, delay)\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId)\n      }\n    }\n  }, [delay, savedCallback])\n}\n"],"file":"use-timeout.js"}