{"version":3,"sources":["../../src/alert.tsx"],"names":["STATUSES","info","icon","InfoIcon","colorScheme","warning","WarningIcon","success","CheckIcon","error","name","errorMessage","AlertProvider","useAlertContext","Alert","props","ref","status","rest","styles","alertStyles","width","display","alignItems","position","overflow","container","className","AlertTitle","title","AlertDescription","descriptionStyles","description","AlertIcon","BaseIcon"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { CheckIcon, InfoIcon, WarningIcon } from \"./icons\"\n\nconst STATUSES = {\n  info: { icon: InfoIcon, colorScheme: \"blue\" },\n  warning: { icon: WarningIcon, colorScheme: \"orange\" },\n  success: { icon: CheckIcon, colorScheme: \"green\" },\n  error: { icon: WarningIcon, colorScheme: \"red\" },\n}\n\nexport type AlertStatus = keyof typeof STATUSES\n\ninterface AlertContext {\n  status: AlertStatus\n}\n\nconst [AlertProvider, useAlertContext] = createContext<AlertContext>({\n  name: \"AlertContext\",\n  errorMessage:\n    \"useAlertContext: `context` is undefined. Seems you forgot to wrap alert components in `<Alert />`\",\n})\n\ninterface AlertOptions {\n  /**\n   * The status of the alert\n   */\n  status?: AlertStatus\n}\n\nexport interface AlertProps\n  extends HTMLChakraProps<\"div\">,\n    AlertOptions,\n    ThemingProps {}\n\n/**\n * Alert is used to communicate the state or status of a\n * page, feature or action\n */\nexport const Alert = forwardRef<AlertProps, \"div\">(function Alert(props, ref) {\n  const { status = \"info\", ...rest } = omitThemingProps(props)\n  const { colorScheme } = STATUSES[status]\n\n  const styles = useMultiStyleConfig(\"Alert\", { ...props, colorScheme })\n\n  const alertStyles: SystemStyleObject = {\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n    overflow: \"hidden\",\n    ...styles.container,\n  }\n\n  return (\n    <AlertProvider value={{ status }}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          role=\"alert\"\n          ref={ref}\n          {...rest}\n          className={cx(\"chakra-alert\", props.className)}\n          __css={alertStyles}\n        />\n      </StylesProvider>\n    </AlertProvider>\n  )\n})\n\nexport interface AlertTitleProps extends HTMLChakraProps<\"div\"> {}\n\nexport const AlertTitle = forwardRef<AlertTitleProps, \"div\">(\n  function AlertTitle(props, ref) {\n    const styles = useStyles()\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-alert__title\", props.className)}\n        __css={styles.title}\n      />\n    )\n  },\n)\n\nexport interface AlertDescriptionProps extends HTMLChakraProps<\"div\"> {}\n\nexport const AlertDescription = forwardRef<AlertDescriptionProps, \"div\">(\n  function AlertDescription(props, ref) {\n    const styles = useStyles()\n    const descriptionStyles: SystemStyleObject = {\n      display: \"inline\",\n      ...styles.description,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-alert__desc\", props.className)}\n        __css={descriptionStyles}\n      />\n    )\n  },\n)\n\nexport interface AlertIconProps extends HTMLChakraProps<\"span\"> {}\n\nexport const AlertIcon: React.FC<AlertIconProps> = (props) => {\n  const { status } = useAlertContext()\n  const { icon: BaseIcon } = STATUSES[status]\n  const styles = useStyles()\n\n  return (\n    <chakra.span\n      display=\"inherit\"\n      {...props}\n      className={cx(\"chakra-alert__icon\", props.className)}\n      __css={styles.icon}\n    >\n      <BaseIcon w=\"100%\" h=\"100%\" />\n    </chakra.span>\n  )\n}\n"],"file":"alert.js"}