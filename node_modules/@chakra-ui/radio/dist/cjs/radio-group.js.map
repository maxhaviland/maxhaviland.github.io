{"version":3,"sources":["../../src/radio-group.tsx"],"names":["name","strict","RadioGroupProvider","useRadioGroupContext","RadioGroup","props","ref","colorScheme","size","variant","children","className","rest","value","onChange","getRootProps","htmlProps","group","React","useMemo","groupProps","_className","__DEV__","displayName"],"mappings":";;;;;AAAA;;AAMA;;AACA;;AACA;;;;;;;;;;qBAUmD,0BAEjD;AACAA,EAAAA,IAAI,EAAE,mBADN;AAEAC,EAAAA,MAAM,EAAE;AAFR,CAFiD,C;IAA5CC,kB;IAAoBC,oB;;;;AAiB3B;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,UAAU,gBAAG,wBACxB,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgC;AAAA,MACtBC,WADsB,GACuCF,KADvC,CACtBE,WADsB;AAAA,MACTC,IADS,GACuCH,KADvC,CACTG,IADS;AAAA,MACHC,OADG,GACuCJ,KADvC,CACHI,OADG;AAAA,MACMC,QADN,GACuCL,KADvC,CACMK,QADN;AAAA,MACgBC,SADhB,GACuCN,KADvC,CACgBM,SADhB;AAAA,MAC8BC,IAD9B,iCACuCP,KADvC;;AAAA,uBAG6B,mCACzDO,IADyD,CAH7B;AAAA,MAGtBC,KAHsB,kBAGtBA,KAHsB;AAAA,MAGfC,QAHe,kBAGfA,QAHe;AAAA,MAGLC,YAHK,kBAGLA,YAHK;AAAA,MAGSf,IAHT,kBAGSA,IAHT;AAAA,MAGegB,SAHf,kBAGeA,SAHf;;AAO9B,MAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CACZ;AAAA,WAAO;AACLnB,MAAAA,IAAI,EAAJA,IADK;AAELQ,MAAAA,IAAI,EAAJA,IAFK;AAGLM,MAAAA,QAAQ,EAARA,QAHK;AAILP,MAAAA,WAAW,EAAXA,WAJK;AAKLM,MAAAA,KAAK,EAALA,KALK;AAMLJ,MAAAA,OAAO,EAAPA;AANK,KAAP;AAAA,GADY,EASZ,CAACD,IAAD,EAAOR,IAAP,EAAac,QAAb,EAAuBP,WAAvB,EAAoCM,KAApC,EAA2CJ,OAA3C,CATY,CAAd;AAYA,MAAMW,UAAU,GAAGL,YAAY,CAACC,SAAD,EAAYV,GAAZ,CAA/B;;AACA,MAAMe,UAAU,GAAG,eAAG,oBAAH,EAAyBV,SAAzB,CAAnB;;AAEA,sBACE,oBAAC,kBAAD;AAAoB,IAAA,KAAK,EAAEM;AAA3B,kBACE,oBAAC,cAAD,CAAQ,GAAR,eAAgBG,UAAhB;AAA4B,IAAA,SAAS,EAAEC;AAAvC,MACGX,QADH,CADF,CADF;AAOD,CA9BuB,CAAnB;;;AAiCP,IAAIY,cAAJ,EAAa;AACXlB,EAAAA,UAAU,CAACmB,WAAX,GAAyB,YAAzB;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  useRadioGroup,\n  UseRadioGroupProps,\n  UseRadioGroupReturn,\n} from \"./use-radio-group\"\n\nexport interface RadioGroupContext\n  extends Pick<UseRadioGroupReturn, \"onChange\" | \"value\" | \"name\">,\n    Omit<ThemingProps, \"orientation\"> {}\n\nconst [RadioGroupProvider, useRadioGroupContext] = createContext<\n  RadioGroupContext\n>({\n  name: \"RadioGroupContext\",\n  strict: false,\n})\n\nexport { useRadioGroupContext }\n\ntype Omitted = \"onChange\" | \"value\" | \"defaultValue\" | \"children\"\nexport interface RadioGroupProps\n  extends UseRadioGroupProps,\n    Omit<HTMLChakraProps<\"div\">, Omitted>,\n    Omit<ThemingProps, \"orientation\"> {\n  children: React.ReactNode\n}\n\n/**\n * Used for multiple radios which are bound in one group,\n * and it indicates which option is selected.\n *\n * @see Docs https://chakra-ui.com/components/radio\n */\nexport const RadioGroup = forwardRef<RadioGroupProps, \"div\">(\n  function RadioGroup(props, ref) {\n    const { colorScheme, size, variant, children, className, ...rest } = props\n\n    const { value, onChange, getRootProps, name, htmlProps } = useRadioGroup(\n      rest,\n    )\n\n    const group = React.useMemo(\n      () => ({\n        name,\n        size,\n        onChange,\n        colorScheme,\n        value,\n        variant,\n      }),\n      [size, name, onChange, colorScheme, value, variant],\n    )\n\n    const groupProps = getRootProps(htmlProps, ref)\n    const _className = cx(\"chakra-radio-group\", className)\n\n    return (\n      <RadioGroupProvider value={group}>\n        <chakra.div {...groupProps} className={_className}>\n          {children}\n        </chakra.div>\n      </RadioGroupProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  RadioGroup.displayName = \"RadioGroup\"\n}\n"],"file":"radio-group.js"}