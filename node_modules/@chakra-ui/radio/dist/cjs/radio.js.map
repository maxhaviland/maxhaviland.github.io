{"version":3,"sources":["../../src/radio.tsx"],"names":["Radio","props","ref","onChangeProp","onChange","valueProp","value","group","styles","spacing","children","isFullWidth","rest","isChecked","name","getInputProps","getCheckboxProps","getLabelProps","htmlProps","layoutPropNames","layoutProps","otherProps","checkboxProps","inputProps","labelProps","rootStyles","width","undefined","display","alignItems","verticalAlign","checkboxStyles","justifyContent","flexShrink","control","labelStyles","userSelect","ml","label","__DEV__","displayName"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  layoutPropNames,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { callAll, split, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useRadioGroupContext } from \"./radio-group\"\nimport { useRadio, UseRadioProps } from \"./use-radio\"\n\ntype Omitted = \"onChange\" | \"defaultChecked\" | \"checked\"\ninterface BaseControlProps extends Omit<HTMLChakraProps<\"div\">, Omitted> {}\n\nexport interface RadioProps\n  extends UseRadioProps,\n    ThemingProps,\n    BaseControlProps {\n  /**\n   * The spacing between the checkbox and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n  /**\n   * If `true`, the radio will occupy the full width of its parent container\n   */\n  isFullWidth?: boolean\n}\n\n/**\n * Radio component is used in forms when a user needs to select a single value from\n * several options.\n *\n * @see Docs https://chakra-ui.com/components/radio\n */\nexport const Radio = forwardRef<RadioProps, \"input\">(function Radio(\n  props,\n  ref,\n) {\n  const { onChange: onChangeProp, value: valueProp } = props\n\n  const group = useRadioGroupContext()\n  const styles = useMultiStyleConfig(\"Radio\", { ...group, ...props })\n\n  const {\n    spacing = \"0.5rem\",\n    children,\n    isFullWidth,\n    ...rest\n  } = omitThemingProps(props)\n\n  let isChecked = props.isChecked || false\n  if (group?.value && valueProp) {\n    isChecked = group.value === valueProp\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && valueProp) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const name = props?.name ?? group?.name\n\n  const {\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    htmlProps,\n  } = useRadio({\n    ...rest,\n    isChecked,\n    onChange,\n    name,\n  })\n\n  const [layoutProps, otherProps] = split(htmlProps, layoutPropNames as any)\n\n  const checkboxProps = getCheckboxProps(otherProps)\n  const inputProps = getInputProps({}, ref)\n  const labelProps = getLabelProps()\n\n  const rootStyles = {\n    width: isFullWidth ? \"full\" : undefined,\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n  }\n\n  const checkboxStyles = {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexShrink: 0,\n    ...styles.control,\n  }\n\n  const labelStyles: SystemStyleObject = {\n    userSelect: \"none\",\n    ml: spacing,\n    ...styles.label,\n  }\n\n  return (\n    <chakra.label className=\"chakra-radio\" {...layoutProps} __css={rootStyles}>\n      <input className=\"chakra-radio__input\" {...inputProps} />\n      <chakra.div\n        className=\"chakra-radio__control\"\n        {...checkboxProps}\n        __css={checkboxStyles}\n      />\n      {children && (\n        <chakra.div\n          className=\"chakra-radio__label\"\n          {...labelProps}\n          __css={labelStyles}\n        >\n          {children}\n        </chakra.div>\n      )}\n    </chakra.label>\n  )\n})\n\nif (__DEV__) {\n  Radio.displayName = \"Radio\"\n}\n"],"file":"radio.js"}