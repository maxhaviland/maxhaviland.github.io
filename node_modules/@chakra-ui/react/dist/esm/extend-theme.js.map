{"version":3,"sources":["../../src/extend-theme.ts"],"names":["defaultTheme","isFunction","mergeWith","extendTheme","overrides","customizer","source","override","sourceValue","overrideValue","undefined"],"mappings":"AAAA,OAAOA,YAAP,MAAoC,kBAApC;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;;AAwBA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAT,CAA8CC,SAA9C,EAA4D;AACjE,WAASC,UAAT,CAAoBC,MAApB,EAAqCC,QAArC,EAAwD;AACtD,QAAIN,UAAU,CAACK,MAAD,CAAd,EAAwB;AACtB,aAAO,YAAwB;AAC7B,YAAME,WAAW,GAAGF,MAAM,CAAC,YAAD,CAA1B;AAEA,YAAMG,aAAa,GAAGR,UAAU,CAACM,QAAD,CAAV,GAClBA,QAAQ,CAAC,YAAD,CADU,GAElBA,QAFJ;AAIA,eAAOL,SAAS,CAAC,EAAD,EAAKM,WAAL,EAAkBC,aAAlB,EAAiCJ,UAAjC,CAAhB;AACD,OARD;AASD,KAXqD,CAatD;;;AACA,WAAOK,SAAP;AACD;;AAED,SAAOR,SAAS,CAAC,EAAD,EAAKF,YAAL,EAAmBI,SAAnB,EAA8BC,UAA9B,CAAhB;AACD","sourcesContent":["import defaultTheme, { Theme } from \"@chakra-ui/theme\"\nimport { isFunction, mergeWith } from \"@chakra-ui/utils\"\nimport { ColorHues } from \"@chakra-ui/theme/dist/types/foundations/colors\"\n\ntype ThemeExtensionTypeHints = {\n  colors: Record<string, Partial<ColorHues> | string> // typehints for color definitions\n}\n\n/**\n * Represents a loose but specific type for the theme override.\n * It provides autocomplete hints for extending the theme, but leaves room\n * for adding properties.\n */\ntype DeepThemeExtension<ThemeObject, TypeHints> = {\n  [Key in keyof ThemeObject]?:\n    | Omit<DeepThemeExtension<ThemeObject[Key], TypeHints>, keyof TypeHints> // recursive type clone\n    | (ThemeObject[Key] extends (...args: any[]) => any\n        ? Partial<ReturnType<ThemeObject[Key]>>\n        : Partial<ThemeObject[Key]>) // allow function or object\n    | Record<string, any> // escape hatch\n} &\n  Partial<TypeHints>\n\nexport type ThemeOverride = DeepThemeExtension<Theme, ThemeExtensionTypeHints>\n\n/**\n * Function to override or customize the Chakra UI theme conveniently\n * @param overrides - Your custom theme object overrides\n */\nexport function extendTheme<T extends ThemeOverride>(overrides: T) {\n  function customizer(source: unknown, override: unknown) {\n    if (isFunction(source)) {\n      return (...args: unknown[]) => {\n        const sourceValue = source(...args)\n\n        const overrideValue = isFunction(override)\n          ? override(...args)\n          : override\n\n        return mergeWith({}, sourceValue, overrideValue, customizer)\n      }\n    }\n\n    // fallback to default behaviour\n    return undefined\n  }\n\n  return mergeWith({}, defaultTheme, overrides, customizer)\n}\n"],"file":"extend-theme.js"}