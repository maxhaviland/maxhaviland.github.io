{"version":3,"sources":["../../src/use-event-listeners.ts"],"names":["React","useEventListeners","listeners","useRef","Map","add","useCallback","el","type","listener","options","current","set","addEventListener","remove","removeEventListener","delete","useEffect","forEach","value","key"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AA6BA,OAAO,SAASC,iBAAT,GAA6C;AAClD,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAN,CAAa,IAAIC,GAAJ,EAAb,CAAlB;AAEA,MAAMC,GAAG,GAAGL,KAAK,CAACM,WAAN,CAAkB,CAACC,EAAD,EAAKC,IAAL,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;AAC7DR,IAAAA,SAAS,CAACS,OAAV,CAAkBC,GAAlB,CAAsBH,QAAtB,EAAgC;AAAED,MAAAA,IAAF;AAAQD,MAAAA,EAAR;AAAYG,MAAAA;AAAZ,KAAhC;AACAH,IAAAA,EAAE,CAACM,gBAAH,CAAoBL,IAApB,EAA0BC,QAA1B,EAAoCC,OAApC;AACD,GAHW,EAGT,EAHS,CAAZ;AAKA,MAAMI,MAAM,GAAGd,KAAK,CAACM,WAAN,CAAkB,CAACC,EAAD,EAAKC,IAAL,EAAWC,QAAX,EAAqBC,OAArB,KAAiC;AAChEH,IAAAA,EAAE,CAACQ,mBAAH,CAAuBP,IAAvB,EAA6BC,QAA7B,EAAuCC,OAAvC;AACAR,IAAAA,SAAS,CAACS,OAAV,CAAkBK,MAAlB,CAAyBP,QAAzB;AACD,GAHc,EAGZ,EAHY,CAAf;AAKAT,EAAAA,KAAK,CAACiB,SAAN,CAAgB,MAAM;AACpB,WAAO,MAAM;AACXf,MAAAA,SAAS,CAACS,OAAV,CAAkBO,OAAlB,CAA0B,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACxCN,QAAAA,MAAM,CAACK,KAAK,CAACZ,EAAP,EAAWY,KAAK,CAACX,IAAjB,EAAuBY,GAAvB,EAA4BD,KAAK,CAACT,OAAlC,CAAN;AACD,OAFD;AAGD,KAJD;AAKD,GAND,EAMG,CAACI,MAAD,CANH;AAQA,SAAO;AAAET,IAAAA,GAAF;AAAOS,IAAAA;AAAP,GAAP;AACD","sourcesContent":["import * as React from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListeners(): EventListeners {\n  const listeners = React.useRef(new Map())\n\n  const add = React.useCallback((el, type, listener, options) => {\n    listeners.current.set(listener, { type, el, options })\n    el.addEventListener(type, listener, options)\n  }, [])\n\n  const remove = React.useCallback((el, type, listener, options) => {\n    el.removeEventListener(type, listener, options)\n    listeners.current.delete(listener)\n  }, [])\n\n  React.useEffect(() => {\n    return () => {\n      listeners.current.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    }\n  }, [remove])\n\n  return { add, remove }\n}\n"],"file":"use-event-listeners.js"}