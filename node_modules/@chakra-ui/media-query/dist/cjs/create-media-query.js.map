{"version":3,"sources":["../../src/create-media-query.ts"],"names":["createMediaQueries","breakpoints","keys","Object","filter","isCustomBreakpoint","reverse","map","breakpoint","index","minWidth","next","maxWidth","undefined","query","createMediaQueryString","hasMinWidth","parseInt","toMediaString","subtract","measurementRegex","calculateMeasurement","value","modifier","replace","match","parseFloat","endsWith"],"mappings":";;;;;AAAA;;AAEA,SAASA,kBAAT,CAA4BC,WAA5B,EAAiE;AAC/D;AACF;AACA;AACA;AACA;AACE,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,WAAZ,EAAyBG,MAAzB,CAAgCC,yBAAhC,EAAoDC,OAApD,EAAb;AAEA;AACF;AACA;;AACE,SAAOJ,IAAI,CAACK,GAAL,CAAS,UAACC,UAAD,EAAaC,KAAb,EAAuB;AACrC,QAAMC,QAAQ,GAAGT,WAAW,CAACO,UAAD,CAA5B;AAEA,QAAMG,IAAI,GAAGT,IAAI,CAACO,KAAK,GAAG,CAAT,CAAjB;AACA,QAAMG,QAAQ,GAAGD,IAAI,GAAGV,WAAW,CAACU,IAAD,CAAd,GAAuBE,SAA5C;AAEA,QAAMC,KAAK,GAAGC,sBAAsB,CAACL,QAAD,EAAWE,QAAX,CAApC;AAEA,WAAO;AACLJ,MAAAA,UAAU,EAAVA,UADK;AAELI,MAAAA,QAAQ,EAARA,QAFK;AAGLF,MAAAA,QAAQ,EAARA,QAHK;AAILI,MAAAA,KAAK,EAALA;AAJK,KAAP;AAMD,GAdM,CAAP;AAeD;AAED;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgCL,QAAhC,EAAkDE,QAAlD,EAAqE;AACnE,MAAMI,WAAW,GAAGC,QAAQ,CAACP,QAAD,EAAW,EAAX,CAAR,IAA0B,CAA9C;;AAEA,MAAI,CAACM,WAAD,IAAgB,CAACJ,QAArB,EAA+B;AAC7B,WAAO,EAAP;AACD;;AAED,MAAIE,KAAK,oBAAkBI,aAAa,CAACR,QAAD,CAA/B,MAAT;;AAEA,MAAI,CAACE,QAAL,EAAe;AACb,WAAOE,KAAP;AACD;;AAED,MAAIA,KAAJ,EAAW;AACTA,IAAAA,KAAK,IAAI,OAAT;AACD;;AAEDA,EAAAA,KAAK,qBAAmBI,aAAa,CAACC,QAAQ,CAACP,QAAD,CAAT,CAAhC,MAAL;AAEA,SAAOE,KAAP;AACD;;AASD,IAAMM,gBAAgB,GAAG,mBAAzB;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAC3BC,KAD2B,EAE3BC,QAF2B,EAGhB;AACX,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,iBAAUA,KAAK,GAAGC,QAAlB;AACD;;AAED,SAAOD,KAAK,CAACE,OAAN,CACLJ,gBADK,EAEL,UAACK,KAAD;AAAA,iBAAcC,UAAU,CAACD,KAAD,CAAV,GAAoBF,QAAlC;AAAA,GAFK,CAAP;AAID,CAZD;AAcA;AACA;AACA;AACA;AACA;;;AACA,SAASJ,QAAT,CAAkBG,KAAlB,EAAiC;AAC/B,SAAOD,oBAAoB,CAACC,KAAD,EAAQA,KAAK,CAACK,QAAN,CAAe,IAAf,IAAuB,CAAC,CAAxB,GAA4B,CAAC,IAArC,CAA3B;AACD;AAED;AACA;AACA;;;AACA,SAAST,aAAT,CAAuBI,KAAvB,EAA8C;AAC5C,SAAO,qBAASA,KAAT,IAAqBA,KAArB,UAAiCA,KAAxC;AACD;;eAEctB,kB","sourcesContent":["import { isNumber, isCustomBreakpoint, StringOrNumber } from \"@chakra-ui/utils\"\n\nfunction createMediaQueries(breakpoints: string[]): MediaQuery[] {\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   *\n   * reverse to begin with the largest\n   */\n  const keys = Object.keys(breakpoints).filter(isCustomBreakpoint).reverse()\n\n  /**\n   * create a min-max media query string\n   */\n  return keys.map((breakpoint, index) => {\n    const minWidth = breakpoints[breakpoint]\n\n    const next = keys[index - 1]\n    const maxWidth = next ? breakpoints[next] : undefined\n\n    const query = createMediaQueryString(minWidth, maxWidth)\n\n    return {\n      breakpoint,\n      maxWidth,\n      minWidth,\n      query,\n    }\n  })\n}\n\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\nfunction createMediaQueryString(minWidth: string, maxWidth?: string) {\n  const hasMinWidth = parseInt(minWidth, 10) >= 0\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\"\n  }\n\n  let query = `(min-width: ${toMediaString(minWidth)})`\n\n  if (!maxWidth) {\n    return query\n  }\n\n  if (query) {\n    query += \" and \"\n  }\n\n  query += `(max-width: ${toMediaString(subtract(maxWidth))})`\n\n  return query\n}\n\ninterface MediaQuery {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n  query: string\n}\n\nconst measurementRegex = /(\\d+\\.?\\d*)/u\n\nconst calculateMeasurement = (\n  value: StringOrNumber,\n  modifier: number,\n): string => {\n  if (typeof value === \"number\") {\n    return `${value + modifier}`\n  }\n\n  return value.replace(\n    measurementRegex,\n    (match) => `${parseFloat(match) + modifier}`,\n  )\n}\n\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\nfunction subtract(value: string) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01)\n}\n\n/**\n * Convert media query value to string\n */\nfunction toMediaString(value: StringOrNumber) {\n  return isNumber(value) ? `${value}px` : value\n}\n\nexport default createMediaQueries\n"],"file":"create-media-query.js"}