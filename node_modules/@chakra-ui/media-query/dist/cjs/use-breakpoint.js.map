{"version":3,"sources":["../../src/use-breakpoint.ts"],"names":["useBreakpoint","defaultBreakpoint","breakpoints","mediaQueries","React","useMemo","base","useState","mediaQuery","find","query","breakpoint","isBrowser","window","matchMedia","matches","undefined","currentBreakpoint","setCurrentBreakpoint","current","update","useCallback","useEffect","listeners","Set","forEach","handleChange","addListener","add","removeListener","clear"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,aAAT,CAAuBC,iBAAvB,EAAmD;AAAA,kBAChC,uBADgC;AAAA,MAChDC,WADgD,aAChDA,WADgD;;AAGxD,MAAMC,YAAY,GAAGC,kBAAMC,OAAN,CACnB;AAAA,WAAM;AAAqBC,MAAAA,IAAI,EAAE;AAA3B,OAAqCJ,WAArC,EAAN;AAAA,GADmB,EAEnB,CAACA,WAAD,CAFmB,CAArB;;AAHwD,wBAQNE,kBAAMG,QAAN,CAAe,YAAM;AACrE,QAAMC,UAAU,GAAGL,YAAY,CAACM,IAAb,CAAkB,gBAA2B;AAAA,UAAxBC,KAAwB,QAAxBA,KAAwB;AAAA,UAAjBC,UAAiB,QAAjBA,UAAiB;AAC9D,UAAIV,iBAAJ,EAAuB,OAAOU,UAAU,KAAKV,iBAAtB;AACvB,UAAIW,gBAAJ,EAAe,OAAOC,MAAM,CAACC,UAAP,CAAkBJ,KAAlB,EAAyBK,OAAhC;AACf,aAAOC,SAAP;AACD,KAJkB,CAAnB;;AAMA,QAAIR,UAAJ,EAAgB;AAAA,UACNE,KADM,GACmBF,UADnB,CACNE,KADM;AAAA,UACIC,UADJ,iCACmBH,UADnB;;AAEd,aAAOG,UAAP;AACD;;AAED,WAAOK,SAAP;AACD,GAbiD,CARM;AAAA,MAQjDC,iBARiD;AAAA,MAQ9BC,oBAR8B;;AAuBxD,MAAMC,OAAO,GAAGF,iBAAH,oBAAGA,iBAAiB,CAAEN,UAAnC;;AAEA,MAAMS,MAAM,GAAGhB,kBAAMiB,WAAN,CACb,UAACX,KAAD,EAAwBC,UAAxB,EAAmD;AACjD,QAAID,KAAK,CAACK,OAAN,IAAiBI,OAAO,KAAKR,UAAU,CAACA,UAA5C,EAAwD;AACtDO,MAAAA,oBAAoB,CAACP,UAAD,CAApB;AACD;AACF,GALY,EAMb,CAACQ,OAAD,CANa,CAAf;;AASAf,oBAAMkB,SAAN,CAAgB,YAAM;AACpB,QAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AAEArB,IAAAA,YAAY,CAACsB,OAAb,CAAqB,iBAA8B;AAAA,UAA3Bf,KAA2B,SAA3BA,KAA2B;AAAA,UAAjBC,UAAiB;;AACjD,UAAMH,UAAU,GAAGK,MAAM,CAACC,UAAP,CAAkBJ,KAAlB,CAAnB,CADiD,CAGjD;;AACAU,MAAAA,MAAM,CAACZ,UAAD,EAAaG,UAAb,CAAN;;AAEA,UAAMe,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBN,QAAAA,MAAM,CAACZ,UAAD,EAAaG,UAAb,CAAN;AACD,OAFD,CANiD,CAUjD;;;AACAH,MAAAA,UAAU,CAACmB,WAAX,CAAuBD,YAAvB,EAXiD,CAajD;AACA;;AACAH,MAAAA,SAAS,CAACK,GAAV,CAAc;AAAEpB,QAAAA,UAAU,EAAVA,UAAF;AAAckB,QAAAA,YAAY,EAAZA;AAAd,OAAd;AAEA,aAAO,YAAM;AACX;AACAlB,QAAAA,UAAU,CAACqB,cAAX,CAA0BH,YAA1B;AACD,OAHD;AAID,KArBD;AAuBA,WAAO,YAAM;AACX;AACAH,MAAAA,SAAS,CAACE,OAAV,CAAkB,iBAAkC;AAAA,YAA/BjB,UAA+B,SAA/BA,UAA+B;AAAA,YAAnBkB,YAAmB,SAAnBA,YAAmB;AAClDlB,QAAAA,UAAU,CAACqB,cAAX,CAA0BH,YAA1B;AACD,OAFD;AAGAH,MAAAA,SAAS,CAACO,KAAV;AACD,KAND;AAOD,GAjCD,EAiCG,CAAC3B,YAAD,EAAeD,WAAf,EAA4BkB,MAA5B,CAjCH;;AAmCA,SAAOD,OAAP;AACD","sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport { isBrowser } from \"@chakra-ui/utils\"\nimport React from \"react\"\nimport createMediaQueries from \"./create-media-query\"\n\ninterface Listener {\n  mediaQuery: MediaQueryList\n  handleChange: () => void\n}\n\nexport interface Breakpoint {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nexport function useBreakpoint(defaultBreakpoint?: string) {\n  const { breakpoints } = useTheme()\n\n  const mediaQueries = React.useMemo(\n    () => createMediaQueries({ base: \"0px\", ...breakpoints }),\n    [breakpoints],\n  )\n\n  const [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    const mediaQuery = mediaQueries.find(({ query, breakpoint }) => {\n      if (defaultBreakpoint) return breakpoint === defaultBreakpoint\n      if (isBrowser) return window.matchMedia(query).matches\n      return undefined\n    })\n\n    if (mediaQuery) {\n      const { query, ...breakpoint } = mediaQuery\n      return breakpoint\n    }\n\n    return undefined\n  })\n\n  const current = currentBreakpoint?.breakpoint\n\n  const update = React.useCallback(\n    (query: MediaQueryList, breakpoint: Breakpoint) => {\n      if (query.matches && current !== breakpoint.breakpoint) {\n        setCurrentBreakpoint(breakpoint)\n      }\n    },\n    [current],\n  )\n\n  React.useEffect(() => {\n    const listeners = new Set<Listener>()\n\n    mediaQueries.forEach(({ query, ...breakpoint }) => {\n      const mediaQuery = window.matchMedia(query)\n\n      // trigger an initial update to determine media query\n      update(mediaQuery, breakpoint)\n\n      const handleChange = () => {\n        update(mediaQuery, breakpoint)\n      }\n\n      // add media query-listener\n      mediaQuery.addListener(handleChange)\n\n      // push the media query list handleChange\n      // so we can use it to remove Listener\n      listeners.add({ mediaQuery, handleChange })\n\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange)\n      }\n    })\n\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(({ mediaQuery, handleChange }) => {\n        mediaQuery.removeListener(handleChange)\n      })\n      listeners.clear()\n    }\n  }, [mediaQueries, breakpoints, update])\n\n  return current\n}\n"],"file":"use-breakpoint.js"}