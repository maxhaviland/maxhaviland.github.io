{"version":3,"sources":["../../src/use-breakpoint.ts"],"names":["useTheme","isBrowser","React","createMediaQueries","useBreakpoint","defaultBreakpoint","breakpoints","mediaQueries","useMemo","base","currentBreakpoint","setCurrentBreakpoint","useState","mediaQuery","find","query","breakpoint","window","matchMedia","matches","undefined","current","update","useCallback","useEffect","listeners","Set","forEach","handleChange","addListener","add","removeListener","clear"],"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAT,CAAuBC,iBAAvB,EAAmD;AACxD,MAAM;AAAEC,IAAAA;AAAF,MAAkBN,QAAQ,EAAhC;AAEA,MAAMO,YAAY,GAAGL,KAAK,CAACM,OAAN,CACnB,MAAML,kBAAkB;AAAGM,IAAAA,IAAI,EAAE;AAAT,KAAmBH,WAAnB,EADL,EAEnB,CAACA,WAAD,CAFmB,CAArB;AAKA,MAAM,CAACI,iBAAD,EAAoBC,oBAApB,IAA4CT,KAAK,CAACU,QAAN,CAAe,MAAM;AACrE,QAAMC,UAAU,GAAGN,YAAY,CAACO,IAAb,CAAkB,UAA2B;AAAA,UAA1B;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT,OAA0B;AAC9D,UAAIX,iBAAJ,EAAuB,OAAOW,UAAU,KAAKX,iBAAtB;AACvB,UAAIJ,SAAJ,EAAe,OAAOgB,MAAM,CAACC,UAAP,CAAkBH,KAAlB,EAAyBI,OAAhC;AACf,aAAOC,SAAP;AACD,KAJkB,CAAnB;;AAMA,QAAIP,UAAJ,EAAgB;AACd,UAAkBG,UAAlB,iCAAiCH,UAAjC;;AACA,aAAOG,UAAP;AACD;;AAED,WAAOI,SAAP;AACD,GAbiD,CAAlD;AAeA,MAAMC,OAAO,GAAGX,iBAAH,oBAAGA,iBAAiB,CAAEM,UAAnC;AAEA,MAAMM,MAAM,GAAGpB,KAAK,CAACqB,WAAN,CACb,CAACR,KAAD,EAAwBC,UAAxB,KAAmD;AACjD,QAAID,KAAK,CAACI,OAAN,IAAiBE,OAAO,KAAKL,UAAU,CAACA,UAA5C,EAAwD;AACtDL,MAAAA,oBAAoB,CAACK,UAAD,CAApB;AACD;AACF,GALY,EAMb,CAACK,OAAD,CANa,CAAf;AASAnB,EAAAA,KAAK,CAACsB,SAAN,CAAgB,MAAM;AACpB,QAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AAEAnB,IAAAA,YAAY,CAACoB,OAAb,CAAqB,WAA8B;AAAA,UAA7B;AAAEZ,QAAAA;AAAF,OAA6B;AAAA,UAAjBC,UAAiB;;AACjD,UAAMH,UAAU,GAAGI,MAAM,CAACC,UAAP,CAAkBH,KAAlB,CAAnB,CADiD,CAGjD;;AACAO,MAAAA,MAAM,CAACT,UAAD,EAAaG,UAAb,CAAN;;AAEA,UAAMY,YAAY,GAAG,MAAM;AACzBN,QAAAA,MAAM,CAACT,UAAD,EAAaG,UAAb,CAAN;AACD,OAFD,CANiD,CAUjD;;;AACAH,MAAAA,UAAU,CAACgB,WAAX,CAAuBD,YAAvB,EAXiD,CAajD;AACA;;AACAH,MAAAA,SAAS,CAACK,GAAV,CAAc;AAAEjB,QAAAA,UAAF;AAAce,QAAAA;AAAd,OAAd;AAEA,aAAO,MAAM;AACX;AACAf,QAAAA,UAAU,CAACkB,cAAX,CAA0BH,YAA1B;AACD,OAHD;AAID,KArBD;AAuBA,WAAO,MAAM;AACX;AACAH,MAAAA,SAAS,CAACE,OAAV,CAAkB,WAAkC;AAAA,YAAjC;AAAEd,UAAAA,UAAF;AAAce,UAAAA;AAAd,SAAiC;AAClDf,QAAAA,UAAU,CAACkB,cAAX,CAA0BH,YAA1B;AACD,OAFD;AAGAH,MAAAA,SAAS,CAACO,KAAV;AACD,KAND;AAOD,GAjCD,EAiCG,CAACzB,YAAD,EAAeD,WAAf,EAA4BgB,MAA5B,CAjCH;AAmCA,SAAOD,OAAP;AACD","sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport { isBrowser } from \"@chakra-ui/utils\"\nimport React from \"react\"\nimport createMediaQueries from \"./create-media-query\"\n\ninterface Listener {\n  mediaQuery: MediaQueryList\n  handleChange: () => void\n}\n\nexport interface Breakpoint {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nexport function useBreakpoint(defaultBreakpoint?: string) {\n  const { breakpoints } = useTheme()\n\n  const mediaQueries = React.useMemo(\n    () => createMediaQueries({ base: \"0px\", ...breakpoints }),\n    [breakpoints],\n  )\n\n  const [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    const mediaQuery = mediaQueries.find(({ query, breakpoint }) => {\n      if (defaultBreakpoint) return breakpoint === defaultBreakpoint\n      if (isBrowser) return window.matchMedia(query).matches\n      return undefined\n    })\n\n    if (mediaQuery) {\n      const { query, ...breakpoint } = mediaQuery\n      return breakpoint\n    }\n\n    return undefined\n  })\n\n  const current = currentBreakpoint?.breakpoint\n\n  const update = React.useCallback(\n    (query: MediaQueryList, breakpoint: Breakpoint) => {\n      if (query.matches && current !== breakpoint.breakpoint) {\n        setCurrentBreakpoint(breakpoint)\n      }\n    },\n    [current],\n  )\n\n  React.useEffect(() => {\n    const listeners = new Set<Listener>()\n\n    mediaQueries.forEach(({ query, ...breakpoint }) => {\n      const mediaQuery = window.matchMedia(query)\n\n      // trigger an initial update to determine media query\n      update(mediaQuery, breakpoint)\n\n      const handleChange = () => {\n        update(mediaQuery, breakpoint)\n      }\n\n      // add media query-listener\n      mediaQuery.addListener(handleChange)\n\n      // push the media query list handleChange\n      // so we can use it to remove Listener\n      listeners.add({ mediaQuery, handleChange })\n\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange)\n      }\n    })\n\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(({ mediaQuery, handleChange }) => {\n        mediaQuery.removeListener(handleChange)\n      })\n      listeners.clear()\n    }\n  }, [mediaQueries, breakpoints, update])\n\n  return current\n}\n"],"file":"use-breakpoint.js"}