{"version":3,"sources":["../../src/use-number-input.ts"],"names":["useCounter","useBoolean","useEventListener","useFormControl","ariaAttr","callAllHandlers","focus","isBrowser","isNull","maxSafeInteger","mergeRefs","minSafeInteger","normalizeEventKey","pick","useCallback","useRef","useSpinner","isFloatingPointNumericCharacter","isValidNumericKeyboardEvent","useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","max","step","stepProp","isReadOnly","isDisabled","getAriaValueText","pattern","inputMode","allowMouseWheel","htmlProps","counter","update","updateFn","increment","incrementFn","decrement","decrementFn","isFocused","setFocused","inputRef","isInteractive","spinner","onChange","event","valueString","target","value","split","filter","join","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","metaKey","ctrlKey","shiftKey","_getAriaValueText","text","defaultText","toString","undefined","ariaValueText","validateAndClamp","next","valueAsNumber","cast","onBlur","off","focusInput","current","spinUp","up","spinDown","down","pointerDown","document","documentElement","ontouchstart","onWheel","isInputFocused","activeElement","direction","Math","sign","deltaY","getIncrementButtonProps","ref","disabled","isAtMax","role","tabIndex","onMouseUp","stop","onMouseLeave","onTouchEnd","getDecrementButtonProps","isAtMin","inputProps","getInputProps","ownProps","type","Number","isNaN","isOutOfRange","autoComplete","autoCorrect","onFocus","on"],"mappings":";;;;AAAA,SAASA,UAAT,QAA4C,oBAA5C;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA6C,kBAA7C;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SACEC,QADF,EAEEC,eAFF,EAIEC,KAJF,EAKEC,SALF,EAMEC,MANF,EAOEC,cAPF,EAQEC,SARF,EASEC,cATF,EAUEC,iBAVF,EAWEC,IAXF,QAcO,kBAdP;AAeA,SAAqCC,WAArC,EAAkDC,MAAlD,QAAgE,OAAhE;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SACEC,+BADF,EAEEC,2BAFF,QAGO,SAHP;;AAiEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAAyD;AAAA,MAAjCA,KAAiC;AAAjCA,IAAAA,KAAiC,GAAJ,EAAI;AAAA;;AAC9D,MAAM;AACJC,IAAAA,kBAAkB,GAAG,IADjB;AAEJC,IAAAA,gBAAgB,GAAG,IAFf;AAGJC,IAAAA,eAAe,GAAG,IAHd;AAIJC,IAAAA,GAAG,GAAGb,cAJF;AAKJc,IAAAA,GAAG,GAAGhB,cALF;AAMJiB,IAAAA,IAAI,EAAEC,QAAQ,GAAG,CANb;AAOJC,IAAAA,UAPI;AAQJC,IAAAA,UARI;AASJC,IAAAA,gBATI;AAWJC,IAAAA,OAAO,GAAG,kBAXN;AAYJC,IAAAA,SAAS,GAAG,SAZR;AAaJC,IAAAA;AAbI,MAqBFb,KArBJ;AAAA,MAoBKc,SApBL,iCAqBId,KArBJ;AAuBA;AACF;AACA;AACA;AACA;;;AACE,MAAMe,OAAO,GAAGnC,UAAU,CAACoB,KAAD,CAA1B;AACA,MAAM;AACJgB,IAAAA,MAAM,EAAEC,QADJ;AAEJC,IAAAA,SAAS,EAAEC,WAFP;AAGJC,IAAAA,SAAS,EAAEC;AAHP,MAIFN,OAJJ;AAMA;AACF;AACA;AACA;AACA;;AACE,MAAM,CAACO,SAAD,EAAYC,UAAZ,IAA0B1C,UAAU,EAA1C;AAEA,MAAM2C,QAAQ,GAAG7B,MAAM,CAAmB,IAAnB,CAAvB;AAEA,MAAM8B,aAAa,GAAG,EAAEjB,UAAU,IAAIC,UAAhB,CAAtB;AAEA,MAAMS,SAAS,GAAGxB,WAAW,CAC3B,UAACY,IAAD,EAAqB;AAAA,QAApBA,IAAoB;AAApBA,MAAAA,IAAoB,GAAbC,QAAa;AAAA;;AACnB,QAAIkB,aAAJ,EAAmB;AACjBN,MAAAA,WAAW,CAACb,IAAD,CAAX;AACD;AACF,GAL0B,EAM3B,CAACa,WAAD,EAAcM,aAAd,EAA6BlB,QAA7B,CAN2B,CAA7B;AASA,MAAMa,SAAS,GAAG1B,WAAW,CAC3B,UAACY,IAAD,EAAqB;AAAA,QAApBA,IAAoB;AAApBA,MAAAA,IAAoB,GAAbC,QAAa;AAAA;;AACnB,QAAIkB,aAAJ,EAAmB;AACjBJ,MAAAA,WAAW,CAACf,IAAD,CAAX;AACD;AACF,GAL0B,EAM3B,CAACe,WAAD,EAAcI,aAAd,EAA6BlB,QAA7B,CAN2B,CAA7B;AASA;AACF;AACA;AACA;AACA;AACA;;AACE,MAAMmB,OAAO,GAAG9B,UAAU,CAACsB,SAAD,EAAYE,SAAZ,CAA1B;AAEA;AACF;AACA;AACA;;AACE,MAAMO,QAAQ,GAAGjC,WAAW,CACzBkC,KAAD,IAA0C;AACxC,QAAMC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CACjBC,KADiB,CACX,EADW,EAEjBC,MAFiB,CAEVpC,+BAFU,EAGjBqC,IAHiB,CAGZ,EAHY,CAApB;AAIAjB,IAAAA,QAAQ,CAACY,WAAD,CAAR;AACD,GAPyB,EAQ1B,CAACZ,QAAD,CAR0B,CAA5B;AAWA,MAAMkB,SAAS,GAAGzC,WAAW,CAC1BkC,KAAD,IAA0B;AACxB;AACN;AACA;AACM,QAAI,CAAC9B,2BAA2B,CAAC8B,KAAD,CAAhC,EAAyC;AACvCA,MAAAA,KAAK,CAACQ,cAAN;AACD;AAED;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;;AACM,QAAMC,UAAU,GAAGC,aAAa,CAACV,KAAD,CAAb,GAAuBrB,QAA1C;AAEA,QAAMgC,QAAQ,GAAG/C,iBAAiB,CAACoC,KAAD,CAAlC;AAEA,QAAMY,MAAmB,GAAG;AAC1BC,MAAAA,OAAO,EAAE,MAAMvB,SAAS,CAACmB,UAAD,CADE;AAE1BK,MAAAA,SAAS,EAAE,MAAMtB,SAAS,CAACiB,UAAD,CAFA;AAG1BM,MAAAA,IAAI,EAAE,MAAM1B,QAAQ,CAACb,GAAD,CAHM;AAI1BwC,MAAAA,GAAG,EAAE,MAAM3B,QAAQ,CAACZ,GAAD;AAJO,KAA5B;AAOA,QAAMwC,MAAM,GAAGL,MAAM,CAACD,QAAD,CAArB;;AAEA,QAAIM,MAAJ,EAAY;AACVjB,MAAAA,KAAK,CAACQ,cAAN;AACAS,MAAAA,MAAM,CAACjB,KAAD,CAAN;AACD;AACF,GAlC0B,EAmC3B,CAACX,QAAD,EAAWG,SAAX,EAAsBF,SAAtB,EAAiCb,GAAjC,EAAsCD,GAAtC,EAA2CG,QAA3C,CAnC2B,CAA7B;;AAsCA,MAAM+B,aAAa,GACjBV,KADoB,IAEjB;AACH,QAAIkB,KAAK,GAAG,CAAZ;;AACA,QAAIlB,KAAK,CAACmB,OAAN,IAAiBnB,KAAK,CAACoB,OAA3B,EAAoC;AAClCF,MAAAA,KAAK,GAAG,GAAR;AACD;;AACD,QAAIlB,KAAK,CAACqB,QAAV,EAAoB;AAClBH,MAAAA,KAAK,GAAG,EAAR;AACD;;AACD,WAAOA,KAAP;AACD,GAXD;AAaA;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,MAAMI,iBAAiB,GAAG,MAAM;AAC9B,QAAMC,IAAI,GAAGzC,gBAAH,oBAAGA,gBAAgB,CAAGK,OAAO,CAACgB,KAAX,CAA7B;;AACA,QAAI,CAAC3C,MAAM,CAAC+D,IAAD,CAAX,EAAmB;AACjB,aAAOA,IAAP;AACD;;AAED,QAAMC,WAAW,GAAGrC,OAAO,CAACgB,KAAR,CAAcsB,QAAd,EAApB,CAN8B,CAO9B;;AACA,WAAO,CAACD,WAAD,GAAeE,SAAf,GAA2BF,WAAlC;AACD,GATD;;AAWA,MAAMG,aAAa,GAAGL,iBAAiB,EAAvC;AAEA;AACF;AACA;;;AACE,MAAMM,gBAAgB,GAAG9D,WAAW,CAAC,MAAM;AACzC,QAAI+D,IAAI,GAAG1C,OAAO,CAACgB,KAAnB;AAEA,QAAI0B,IAAI,KAAK,EAAb,EAAiB;;AAEjB,QAAI1C,OAAO,CAAC2C,aAAR,GAAwBtD,GAA5B,EAAiC;AAC/BqD,MAAAA,IAAI,GAAGrD,GAAP;AACD;;AAED,QAAIW,OAAO,CAAC2C,aAAR,GAAwBrD,GAA5B,EAAiC;AAC/BoD,MAAAA,IAAI,GAAGpD,GAAP;AACD;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACI,QAAIU,OAAO,CAACgB,KAAR,KAAkB0B,IAAtB,EAA4B;AAC1B1C,MAAAA,OAAO,CAAC4C,IAAR,CAAaF,IAAb;AACD;AACF,GAtBmC,EAsBjC,CAAC1C,OAAD,EAAUV,GAAV,EAAeD,GAAf,CAtBiC,CAApC;AAwBA,MAAMwD,MAAM,GAAGlE,WAAW,CAAC,MAAM;AAC/B6B,IAAAA,UAAU,CAACsC,GAAX;;AAEA,QAAI3D,gBAAJ,EAAsB;AACpBsD,MAAAA,gBAAgB;AACjB;AACF,GANyB,EAMvB,CAACtD,gBAAD,EAAmBqB,UAAnB,EAA+BiC,gBAA/B,CANuB,CAA1B;AAQA,MAAMM,UAAU,GAAGpE,WAAW,CAAC,MAAM;AACnC,QAAIO,kBAAkB,IAAIuB,QAAQ,CAACuC,OAAnC,EAA4C;AAC1C7E,MAAAA,KAAK,CAACsC,QAAQ,CAACuC,OAAV,CAAL;AACD;AACF,GAJ6B,EAI3B,CAAC9D,kBAAD,CAJ2B,CAA9B;AAMA,MAAM+D,MAAM,GAAGtE,WAAW,CACvBkC,KAAD,IAAgB;AACdA,IAAAA,KAAK,CAACQ,cAAN;AACAV,IAAAA,OAAO,CAACuC,EAAR;AACAH,IAAAA,UAAU;AACX,GALuB,EAMxB,CAACA,UAAD,EAAapC,OAAb,CANwB,CAA1B;AASA,MAAMwC,QAAQ,GAAGxE,WAAW,CACzBkC,KAAD,IAAgB;AACdA,IAAAA,KAAK,CAACQ,cAAN;AACAV,IAAAA,OAAO,CAACyC,IAAR;AACAL,IAAAA,UAAU;AACX,GALyB,EAM1B,CAACA,UAAD,EAAapC,OAAb,CAN0B,CAA5B;AASA,MAAM0C,WAAW,GACfjF,SAAS,IAAI,CAAC,CAACkF,QAAQ,CAACC,eAAT,CAAyBC,YAAxC,GACI,cADJ,GAEI,aAHN;AAKAzF,EAAAA,gBAAgB,CACd,OADc,EAEd,SAAS0F,OAAT,CAAiB5C,KAAjB,EAAwB;AACtB,QAAM6C,cAAc,GAAGJ,QAAQ,CAACK,aAAT,KAA2BlD,QAAQ,CAACuC,OAA3D;AACA,QAAI,CAAClD,eAAD,IAAoB,CAAC4D,cAAzB,EAAyC;AAEzC7C,IAAAA,KAAK,CAACQ,cAAN;AAEA,QAAMC,UAAU,GAAGC,aAAa,CAACV,KAAD,CAAb,GAA8BrB,QAAjD;AACA,QAAMoE,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUjD,KAAK,CAACkD,MAAhB,CAAlB;;AAEA,QAAIH,SAAS,KAAK,CAAC,CAAnB,EAAsB;AACpBzD,MAAAA,SAAS,CAACmB,UAAD,CAAT;AACD,KAFD,MAEO,IAAIsC,SAAS,KAAK,CAAlB,EAAqB;AAC1BvD,MAAAA,SAAS,CAACiB,UAAD,CAAT;AACD;AACF,GAhBa,EAiBdb,QAAQ,CAACuC,OAjBK,CAAhB;AAoBA,MAAMgB,uBAAmC,GAAGrF,WAAW,CACrD,UAACM,KAAD,EAAagF,GAAb,EAA4B;AAAA,QAA3BhF,KAA2B;AAA3BA,MAAAA,KAA2B,GAAnB,EAAmB;AAAA;;AAAA,QAAfgF,GAAe;AAAfA,MAAAA,GAAe,GAAT,IAAS;AAAA;;AAC1B,QAAMC,QAAQ,GAAGxE,UAAU,IAAKN,eAAe,IAAIY,OAAO,CAACmE,OAA3D;AACA,wBACKlF,KADL;AAEEgF,MAAAA,GAFF;AAGEG,MAAAA,IAAI,EAAE,QAHR;AAIEC,MAAAA,QAAQ,EAAE,CAAC,CAJb;AAKE,OAAChB,WAAD,GAAenF,eAAe,CAACe,KAAK,CAACoE,WAAD,CAAN,EAAqBJ,MAArB,CALhC;AAMEqB,MAAAA,SAAS,EAAEpG,eAAe,CAACe,KAAK,CAACqF,SAAP,EAAkB3D,OAAO,CAAC4D,IAA1B,CAN5B;AAOEC,MAAAA,YAAY,EAAEtG,eAAe,CAACe,KAAK,CAACqF,SAAP,EAAkB3D,OAAO,CAAC4D,IAA1B,CAP/B;AAQEE,MAAAA,UAAU,EAAEvG,eAAe,CAACe,KAAK,CAACwF,UAAP,EAAmB9D,OAAO,CAAC4D,IAA3B,CAR7B;AASEL,MAAAA,QATF;AAUE,uBAAiBjG,QAAQ,CAACiG,QAAD;AAV3B;AAYD,GAfoD,EAgBrD,CACEb,WADF,EAEErD,OAAO,CAACmE,OAFV,EAGE/E,eAHF,EAIE6D,MAJF,EAKEtC,OAAO,CAAC4D,IALV,EAME7E,UANF,CAhBqD,CAAvD;AA0BA,MAAMgF,uBAAmC,GAAG/F,WAAW,CACrD,UAACM,KAAD,EAAagF,GAAb,EAA4B;AAAA,QAA3BhF,KAA2B;AAA3BA,MAAAA,KAA2B,GAAnB,EAAmB;AAAA;;AAAA,QAAfgF,GAAe;AAAfA,MAAAA,GAAe,GAAT,IAAS;AAAA;;AAC1B,QAAMC,QAAQ,GAAGxE,UAAU,IAAKN,eAAe,IAAIY,OAAO,CAAC2E,OAA3D;AACA,wBACK1F,KADL;AAEEgF,MAAAA,GAFF;AAGEG,MAAAA,IAAI,EAAE,QAHR;AAIEC,MAAAA,QAAQ,EAAE,CAAC,CAJb;AAKE,OAAChB,WAAD,GAAenF,eAAe,CAACe,KAAK,CAACoE,WAAD,CAAN,EAAqBF,QAArB,CALhC;AAMEqB,MAAAA,YAAY,EAAEtG,eAAe,CAACe,KAAK,CAACuF,YAAP,EAAqB7D,OAAO,CAAC4D,IAA7B,CAN/B;AAOED,MAAAA,SAAS,EAAEpG,eAAe,CAACe,KAAK,CAACqF,SAAP,EAAkB3D,OAAO,CAAC4D,IAA1B,CAP5B;AAQEE,MAAAA,UAAU,EAAEvG,eAAe,CAACe,KAAK,CAACwF,UAAP,EAAmB9D,OAAO,CAAC4D,IAA3B,CAR7B;AASEL,MAAAA,QATF;AAUE,uBAAiBjG,QAAQ,CAACiG,QAAD;AAV3B;AAYD,GAfoD,EAgBrD,CACEb,WADF,EAEErD,OAAO,CAAC2E,OAFV,EAGEvF,eAHF,EAIE+D,QAJF,EAKExC,OAAO,CAAC4D,IALV,EAME7E,UANF,CAhBqD,CAAvD;AA0BA,MAAMkF,UAAU,GAAG5G,cAAc,CAAmBiB,KAAnB,CAAjC;AAEA,MAAM4F,aAAyB,GAAGlG,WAAW,CAC3C,UAACM,KAAD,EAAagF,GAAb,EAA4B;AAAA;;AAAA,QAA3BhF,KAA2B;AAA3BA,MAAAA,KAA2B,GAAnB,EAAmB;AAAA;;AAAA,QAAfgF,GAAe;AAAfA,MAAAA,GAAe,GAAT,IAAS;AAAA;;AAC1B,QAAMa,QAAQ,GAAGpG,IAAI,CAACkG,UAAD,EAAa,CAChC,IADgC,EAEhC,UAFgC,EAGhC,UAHgC,EAIhC,UAJgC,EAKhC,cALgC,EAMhC,eANgC,EAOhC,eAPgC,EAQhC,kBARgC,EAShC,SATgC,EAUhC,QAVgC,CAAb,CAArB;AAaA,wBACK3F,KADL,EAEK6F,QAFL;AAGEb,MAAAA,GAAG,EAAE1F,SAAS,CAACkC,QAAD,EAAWwD,GAAX,CAHhB;AAIEjD,MAAAA,KAAK,EAAEhB,OAAO,CAACgB,KAJjB;AAKEoD,MAAAA,IAAI,EAAE,YALR;AAMEW,MAAAA,IAAI,EAAE,MANR;AAOElF,MAAAA,SAAS,sBAAEZ,KAAK,CAACY,SAAR,+BAAqBA,SAPhC;AAQED,MAAAA,OARF;AASE,uBAAiBP,GATnB;AAUE,uBAAiBC,GAVnB;AAWE,uBAAiBwF,QAAQ,CAACZ,QAX5B;AAYE,uBAAiBc,MAAM,CAACC,KAAP,CAAajF,OAAO,CAAC2C,aAArB,IACbJ,SADa,GAEbvC,OAAO,CAAC2C,aAdd;AAeE,sBAAgB1E,QAAQ,CACtB6G,QAAQ,CAAC,cAAD,CAAR,IAA4B9E,OAAO,CAACkF,YADd,CAf1B;AAkBE,wBAAkB1C,aAlBpB;AAmBE2C,MAAAA,YAAY,EAAE,KAnBhB;AAoBEC,MAAAA,WAAW,EAAE,KApBf;AAqBExE,MAAAA,QAAQ,EAAE1C,eAAe,CAACe,KAAK,CAAC2B,QAAP,EAAiBA,QAAjB,CArB3B;AAsBEQ,MAAAA,SAAS,EAAElD,eAAe,CAACe,KAAK,CAACmC,SAAP,EAAkBA,SAAlB,CAtB5B;AAuBEiE,MAAAA,OAAO,EAAEnH,eAAe,CAAC4G,QAAQ,CAACO,OAAV,EAAmB7E,UAAU,CAAC8E,EAA9B,CAvB1B;AAwBEzC,MAAAA,MAAM,EAAE3E,eAAe,CAAC4G,QAAQ,CAACjC,MAAV,EAAkBA,MAAlB;AAxBzB;AA0BD,GAzC0C,EA0C3C,CACE+B,UADF,EAEE5E,OAAO,CAACgB,KAFV,EAGEhB,OAAO,CAAC2C,aAHV,EAIE3C,OAAO,CAACkF,YAJV,EAKErF,SALF,EAMED,OANF,EAOEP,GAPF,EAQEC,GARF,EASEkD,aATF,EAUE5B,QAVF,EAWEQ,SAXF,EAYEZ,UAAU,CAAC8E,EAZb,EAaEzC,MAbF,CA1C2C,CAA7C;AA2DA,SAAO;AACL7B,IAAAA,KAAK,EAAEhB,OAAO,CAACgB,KADV;AAEL2B,IAAAA,aAAa,EAAE3C,OAAO,CAAC2C,aAFlB;AAGLpC,IAAAA,SAHK;AAILb,IAAAA,UAJK;AAKLD,IAAAA,UALK;AAMLuE,IAAAA,uBANK;AAOLU,IAAAA,uBAPK;AAQLG,IAAAA,aARK;AASL9E,IAAAA;AATK,GAAP;AAWD","sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport { useBoolean, useEventListener } from \"@chakra-ui/hooks\"\nimport { useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  EventKeyMap,\n  focus,\n  isBrowser,\n  isNull,\n  maxSafeInteger,\n  mergeRefs,\n  minSafeInteger,\n  normalizeEventKey,\n  pick,\n  PropGetter,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport { ChangeEvent, KeyboardEvent, useCallback, useRef } from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n}\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    /**\n     * These props are destructured to ensure `htmlProps` resolves to the correct type\n     */\n    onChange: onChangeProp,\n    precision,\n    ...htmlProps\n  } = props\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const valueString = event.target.value\n        .split(\"\")\n        .filter(isFloatingPointNumericCharacter)\n        .join(\"\")\n      updateFn(valueString)\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = <E extends React.KeyboardEvent | React.WheelEvent>(\n    event: E,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const _getAriaValueText = () => {\n    const text = getAriaValueText?.(counter.value)\n    if (!isNull(text)) {\n      return text\n    }\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }\n\n  const ariaValueText = _getAriaValueText()\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    if (counter.value !== next) {\n      counter.cast(next)\n    }\n  }, [counter, max, min])\n\n  const onBlur = useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = useCallback(() => {\n    if (focusInputOnChange && inputRef.current) {\n      focus(inputRef.current)\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  useEventListener(\n    \"wheel\",\n    function onWheel(event) {\n      const isInputFocused = document.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event as any) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    inputRef.current,\n  )\n\n  const getIncrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMax,\n      keepWithinRange,\n      spinUp,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getDecrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMin,\n      keepWithinRange,\n      spinDown,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const inputProps = useFormControl<HTMLInputElement>(props)\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const ownProps = pick(inputProps, [\n        \"id\",\n        \"disabled\",\n        \"readOnly\",\n        \"required\",\n        \"aria-invalid\",\n        \"aria-required\",\n        \"aria-readonly\",\n        \"aria-describedby\",\n        \"onFocus\",\n        \"onBlur\",\n      ])\n\n      return {\n        ...props,\n        ...ownProps,\n        ref: mergeRefs(inputRef, ref),\n        value: counter.value,\n        role: \"spinbutton\",\n        type: \"text\",\n        inputMode: props.inputMode ?? inputMode,\n        pattern,\n        \"aria-valuemin\": min,\n        \"aria-valuemax\": max,\n        \"aria-disabled\": ownProps.disabled,\n        \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n          ? undefined\n          : counter.valueAsNumber,\n        \"aria-invalid\": ariaAttr(\n          ownProps[\"aria-invalid\"] || counter.isOutOfRange,\n        ),\n        \"aria-valuetext\": ariaValueText,\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        onChange: callAllHandlers(props.onChange, onChange),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(ownProps.onFocus, setFocused.on),\n        onBlur: callAllHandlers(ownProps.onBlur, onBlur),\n      }\n    },\n    [\n      inputProps,\n      counter.value,\n      counter.valueAsNumber,\n      counter.isOutOfRange,\n      inputMode,\n      pattern,\n      min,\n      max,\n      ariaValueText,\n      onChange,\n      onKeyDown,\n      setFocused.on,\n      onBlur,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"],"file":"use-number-input.js"}