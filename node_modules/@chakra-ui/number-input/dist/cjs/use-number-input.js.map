{"version":3,"sources":["../../src/use-number-input.ts"],"names":["useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","minSafeInteger","max","maxSafeInteger","step","stepProp","isReadOnly","isDisabled","getAriaValueText","isInvalid","pattern","inputMode","allowMouseWheel","id","onChangeProp","onChange","precision","htmlProps","counter","updateFn","update","incrementFn","increment","decrementFn","decrement","isFocused","setFocused","inputRef","isInteractive","spinner","event","valueString","target","value","split","filter","isFloatingPointNumericCharacter","join","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","metaKey","ctrlKey","shiftKey","_getAriaValueText","text","defaultText","toString","undefined","ariaValueText","validateAndClamp","next","valueAsNumber","cast","onBlur","off","focusInput","current","spinUp","up","spinDown","down","pointerDown","isBrowser","document","documentElement","ontouchstart","onWheel","isInputFocused","activeElement","direction","Math","sign","deltaY","getIncrementButtonProps","ref","disabled","isAtMax","role","tabIndex","onMouseUp","stop","onMouseLeave","onTouchEnd","getDecrementButtonProps","isAtMin","inputProps","getInputProps","ownProps","type","Number","isNaN","isOutOfRange","autoComplete","autoCorrect","onFocus","on"],"mappings":"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","sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport { useBoolean, useEventListener } from \"@chakra-ui/hooks\"\nimport { useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  EventKeyMap,\n  focus,\n  isBrowser,\n  isNull,\n  maxSafeInteger,\n  mergeRefs,\n  minSafeInteger,\n  normalizeEventKey,\n  pick,\n  PropGetter,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport { ChangeEvent, KeyboardEvent, useCallback, useRef } from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n}\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    /**\n     * These props are destructured to ensure `htmlProps` resolves to the correct type\n     */\n    onChange: onChangeProp,\n    precision,\n    ...htmlProps\n  } = props\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const valueString = event.target.value\n        .split(\"\")\n        .filter(isFloatingPointNumericCharacter)\n        .join(\"\")\n      updateFn(valueString)\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = <E extends React.KeyboardEvent | React.WheelEvent>(\n    event: E,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const _getAriaValueText = () => {\n    const text = getAriaValueText?.(counter.value)\n    if (!isNull(text)) {\n      return text\n    }\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }\n\n  const ariaValueText = _getAriaValueText()\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    if (counter.value !== next) {\n      counter.cast(next)\n    }\n  }, [counter, max, min])\n\n  const onBlur = useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = useCallback(() => {\n    if (focusInputOnChange && inputRef.current) {\n      focus(inputRef.current)\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  useEventListener(\n    \"wheel\",\n    function onWheel(event) {\n      const isInputFocused = document.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event as any) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    inputRef.current,\n  )\n\n  const getIncrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMax,\n      keepWithinRange,\n      spinUp,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getDecrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMin,\n      keepWithinRange,\n      spinDown,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const inputProps = useFormControl<HTMLInputElement>(props)\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const ownProps = pick(inputProps, [\n        \"id\",\n        \"disabled\",\n        \"readOnly\",\n        \"required\",\n        \"aria-invalid\",\n        \"aria-required\",\n        \"aria-readonly\",\n        \"aria-describedby\",\n        \"onFocus\",\n        \"onBlur\",\n      ])\n\n      return {\n        ...props,\n        ...ownProps,\n        ref: mergeRefs(inputRef, ref),\n        value: counter.value,\n        role: \"spinbutton\",\n        type: \"text\",\n        inputMode: props.inputMode ?? inputMode,\n        pattern,\n        \"aria-valuemin\": min,\n        \"aria-valuemax\": max,\n        \"aria-disabled\": ownProps.disabled,\n        \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n          ? undefined\n          : counter.valueAsNumber,\n        \"aria-invalid\": ariaAttr(\n          ownProps[\"aria-invalid\"] || counter.isOutOfRange,\n        ),\n        \"aria-valuetext\": ariaValueText,\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        onChange: callAllHandlers(props.onChange, onChange),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(ownProps.onFocus, setFocused.on),\n        onBlur: callAllHandlers(ownProps.onBlur, onBlur),\n      }\n    },\n    [\n      inputProps,\n      counter.value,\n      counter.valueAsNumber,\n      counter.isOutOfRange,\n      inputMode,\n      pattern,\n      min,\n      max,\n      ariaValueText,\n      onChange,\n      onKeyDown,\n      setFocused.on,\n      onBlur,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"],"file":"use-number-input.js"}